// src/telegram/telegramApi.ts
import { Env, UserState } from './types';

// This class wraps the raw fetch calls to the Telegram API for better type safety and error handling.
class TelegramApi {
    private token: string;

    constructor(token: string) {
        this.token = token;
    }

    private async apiRequest(method: string, payload: object): Promise<any> {
        const url = `https://api.telegram.org/bot${this.token}/${method}`;
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });

            const responseBody = await response.json();

            if (!response.ok || !responseBody.ok) {
                console.error(`Telegram API Error: ${method} failed with status ${response.status}`, responseBody);
                throw new Error(`Telegram API Error: ${method} failed. Response: ${JSON.stringify(responseBody)}`);
            }
            return responseBody;
        } catch (error) {
            console.error(`Failed to call Telegram API method ${method}`, error);
            throw error;
        }
    }
    
    // --- Public methods for different API calls ---
    
    async sendMessage(payload: { chat_id: number; text: string; parse_mode?: string; reply_markup?: object; }): Promise<any> {
        return this.apiRequest('sendMessage', payload);
    }

    async editMessageText(payload: { chat_id: number; message_id: number; text: string; parse_mode?: string; reply_markup?: object; }): Promise<any> {
        return this.apiRequest('editMessageText', payload);
    }
    
    async answerCallbackQuery(payload: { callback_query_id: string; text?: string; }): Promise<any> {
        return this.apiRequest('answerCallbackQuery', payload);
    }
}

// --- High-Level UI Functions ---

export async function showMainMenu(chatId: number, state: UserState, env: Env, text?: string, messageId?: number) {
    const payload = {
        chat_id: chatId,
        text: text || `*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*`,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "show_stats" }, { text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data: "add_bet" }],
                [{ text: "üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data: "show_competitions" }, { text: "üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data: "show_goals" }],
                [{ text: "ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫", callback_data: "ai_chat" }],
            ]
        }
    };
     if (messageId) {
        await env.TELEGRAM.editMessageText({ ...payload, message_id: messageId });
    } else {
        await env.TELEGRAM.sendMessage(payload);
    }
}

export async function showStartMenu(chatId: number, env: Env, text?: string, messageId?: number) {
    const payload = {
        chat_id: chatId,
        text: text || "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: "‚û°Ô∏è –í–æ–π—Ç–∏", callback_data: "start_login" }],
                [{ text: "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data: "start_register" }]
            ]
        }
    };
    if (messageId) {
        await env.TELEGRAM.editMessageText({ ...payload, message_id: messageId });
    } else {
        await env.TELEGRAM.sendMessage(payload);
    }
}

export async function reportError(chatId: number, env: Env, context: string, error: any) {
    console.error(`Error in ${context}:`, error);
    const errorMessage = error instanceof Error ? error.message : JSON.stringify(error);
    try {
        await env.TELEGRAM.sendMessage({
            chat_id: chatId,
            text: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${errorMessage.substring(0, 500)}`,
        });
    } catch (reportErr) {
        console.error("Critical: Failed to report error to user:", reportErr);
    }
}

// This function enhances the environment with a pre-configured Telegram API client.
// It should be called at the start of the request.
export function enhanceEnv(env: Env): Env {
    if (!(env as any).TELEGRAM) {
        (env as any).TELEGRAM = new TelegramApi(env.TELEGRAM_BOT_TOKEN);
    }
    return env;
}
