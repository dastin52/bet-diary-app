// src/telegram/commands.ts
import { Env, UserState, BetStatus } from './types';
import { showMainMenu, showStartMenu } from './telegramApi';
import { setUserState } from './state';
import { GoogleGenAI } from "@google/genai";

// --- Unauthenticated Commands ---

export async function handleStart(chatId: number, state: UserState, env: Env): Promise<void> {
    if (state.user) {
        await handleMenu(chatId, state, env, `–í—ã —É–∂–µ –≤–æ—à–ª–∏ –∫–∞–∫ *${state.user.nickname}*.`);
    } else {
        await showStartMenu(chatId, env);
    }
}

export async function handleStartRegister(chatId: number, state: UserState, env: Env, messageId: number): Promise<void> {
    state.dialog = { step: 'register_email', messageId, data: {} };
    await setUserState(chatId, state, env);
    await env.TELEGRAM.editMessageText({
        chat_id: chatId,
        message_id: messageId,
        text: "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *email*:",
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_dialog:start" }]] }
    });
}

export async function handleStartLogin(chatId: number, state: UserState, env: Env, messageId: number): Promise<void> {
     await env.TELEGRAM.editMessageText({
        chat_id: chatId,
        message_id: messageId,
        text: "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏?",
        reply_markup: {
            inline_keyboard: [
                [{ text: "üîë –ß–µ—Ä–µ–∑ –õ–æ–≥–∏–Ω/–ü–∞—Ä–æ–ª—å", callback_data: "login_password" }],
                [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (–∫–æ–¥ —Å —Å–∞–π—Ç–∞)", callback_data: "login_code" }],
                [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "cancel_dialog:start" }]
            ]
        }
    });
}

export async function handleAuthCode(chatId: number, code: string, state: UserState, env: Env): Promise<void> {
    const key = `tgauth:${code}`;
    const userDataString = await env.BOT_STATE.get(key);

    if (userDataString) {
        const userData = JSON.parse(userDataString);
        const newState = { ...userData, dialog: null }; // Ensure dialog is cleared
        
        await setUserState(chatId, newState, env);
        await env.BOT_STATE.delete(key); 

        const nickname = newState.user?.nickname || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        await env.TELEGRAM.sendMessage({
            chat_id: chatId,
            text: `‚úÖ *–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!*\n\n–ü—Ä–∏–≤–µ—Ç, ${nickname}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.`,
            parse_mode: 'Markdown',
        });
        await showMainMenu(chatId, newState, env);
    } else {
        await env.TELEGRAM.sendMessage({
            chat_id: chatId,
            text: "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode: 'Markdown',
        });
    }
}


// --- Authenticated Commands ---

export async function handleMenu(chatId: number, state: UserState, env: Env, text?: string): Promise<void> {
    if (state.user) {
        await showMainMenu(chatId, state, env, text);
    } else {
        await showStartMenu(chatId, env, "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
    }
}

export async function handleShowStats(chatId: number, state: UserState, env: Env): Promise<void> {
    const settledBets = state.bets.filter(b => b.status !== BetStatus.Pending);
    const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
    const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
    const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
    const betCount = settledBets.length;
    const wonBets = settledBets.filter(b => b.status === BetStatus.Won).length;
    const nonVoidBets = settledBets.filter(b => b.status !== BetStatus.Void).length;
    const winRate = nonVoidBets > 0 ? (wonBets / nonVoidBets) * 100 : 0;

    const statsText = `
*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–ë–∞–Ω–∫:* ${state.bankroll.toFixed(2)} ‚ÇΩ
*–ü—Ä–∏–±—ã–ª—å:* ${totalProfit.toFixed(2)} ‚ÇΩ
*ROI:* ${roi.toFixed(2)}%
*–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å:* ${winRate.toFixed(2)}%
*–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:* ${betCount}
    `;
    await env.TELEGRAM.sendMessage({
        chat_id: chatId,
        text: statsText,
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "cancel_dialog" }]] }
    });
}

export async function handleStartAddBet(chatId: number, state: UserState, env: Env): Promise<void> {
    // This will be expanded into a dialog later
    await env.TELEGRAM.sendMessage({
        chat_id: chatId,
        text: '‚ûï –†–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
        reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "cancel_dialog" }]] }
    });
}

export async function handleShowCompetitions(chatId: number, state: UserState, env: Env): Promise<void> {
    await env.TELEGRAM.sendMessage({
        chat_id: chatId,
        text: 'üèÜ –†–∞–∑–¥–µ–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
        reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "cancel_dialog" }]] }
    });
}

export async function handleShowGoals(chatId: number, state: UserState, env: Env): Promise<void> {
    await env.TELEGRAM.sendMessage({
        chat_id: chatId,
        text: 'üéØ –†–∞–∑–¥–µ–ª "–ú–æ–∏ —Ü–µ–ª–∏" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
        reply_markup: { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "cancel_dialog" }]] }
    });
}

export async function handleStartAiChat(chatId: number, state: UserState, env: Env, messageId: number): Promise<void> {
    state.dialog = { step: 'ai_chat_active', messageId, data: { history: [] } };
    await setUserState(chatId, state, env);
    await env.TELEGRAM.editMessageText({
        chat_id: chatId,
        message_id: messageId,
        text: 'ü§ñ –í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.',
        reply_markup: {
            inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data: 'cancel_dialog' }]]
        }
    });
}


// --- General Commands ---

export async function handleCancelDialog(chatId: number, state: UserState, env: Env, messageId: number, data: string): Promise<void> {
    state.dialog = null;
    await setUserState(chatId, state, env);
    const target = data.split(':')[1];
    
    if (state.user) {
        await showMainMenu(chatId, state, env, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", messageId);
    } else {
        await showStartMenu(chatId, env, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", messageId);
    }
}

export async function handleUnknownCommand(chatId: number, state: UserState, env: Env): Promise<void> {
    if (state.user) {
        await showMainMenu(chatId, state, env, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Ç –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
    } else {
        await showStartMenu(chatId, env, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.");
    }
}
