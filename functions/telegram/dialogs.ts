// functions/telegram/dialogs.ts
import { Bet, BetStatus, BetType, DialogState, Env, TelegramMessage, UserState, TelegramCallbackQuery, TelegramUpdate, GoalMetric } from './types';
import { setUserState, addBetToState, addGoalToState, updateAndSyncState } from './state';
import { deleteMessage, editMessageText, sendMessage } from './telegramApi';
import { BOOKMAKERS, SPORTS, BET_TYPE_OPTIONS, MARKETS_BY_SPORT, COMMON_ODDS } from '../constants';
import { calculateRiskManagedStake } from '../utils/betUtils';
import { showMainMenu } from './ui';
import { reportError } from './telegramApi';
import { buildGoalCb, GOAL_ACTIONS } from './goals';

const makeKeyboard = (options: { text: string, callback_data: string }[][]) => ({ inline_keyboard: options });

const DIALOG_TYPES = {
    ADD_BET: 'add_bet',
    AI_CHAT: 'ai_chat',
    ADD_GOAL: 'add_goal',
} as const;

const STEPS = {
    // Add Bet
    BET_TYPE: 'BET_TYPE',
    SPORT: 'SPORT',
    EVENT: 'EVENT',
    OUTCOME: 'OUTCOME',
    STAKE: 'STAKE',
    ODDS: 'ODDS',
    BOOKMAKER: 'BOOKMAKER',
    CONFIRM: 'CONFIRM',
    PARLAY_ACTION: 'PARLAY_ACTION',
    // Add Goal
    GOAL_TITLE: 'GOAL_TITLE',
    GOAL_METRIC: 'GOAL_METRIC',
    GOAL_TARGET: 'GOAL_TARGET',
    GOAL_DEADLINE: 'GOAL_DEADLINE',
    GOAL_CONFIRM: 'GOAL_CONFIRM',
    // AI Chat
    CHATTING: 'CHATTING'
};

const getChatId = (update: TelegramUpdate): number | null => {
    if (update.message) return update.message.chat.id;
    if (update.callback_query) return update.callback_query.message.chat.id;
    return null;
}
const getUserInput = (update: TelegramUpdate): string => {
    if (update.message?.text) return update.message.text;
    if (update.callback_query?.data) return update.callback_query.data;
    return '';
}

export async function continueDialog(update: TelegramUpdate, state: UserState, env: Env) {
    if (!state.dialog) return;

    try {
        switch (state.dialog.type) {
            case DIALOG_TYPES.ADD_BET:
                await continueAddBetDialog(update, state, env);
                break;
            case DIALOG_TYPES.AI_CHAT:
                await continueAiChatDialog(update, state, env);
                break;
            case DIALOG_TYPES.ADD_GOAL:
                await continueAddGoalDialog(update, state, env);
                break;
        }
    } catch (error) {
        const chatId = getChatId(update);
        if (chatId) {
            await reportError(chatId, env, `Dialog (${state.dialog.type})`, error);
        }
    }
}


// --- AI Chat Dialog ---
export async function startAiChatDialog(chatId: number, state: UserState, env: Env) {
    const dialog: DialogState = { type: 'ai_chat', step: STEPS.CHATTING, data: { history: [] } };
    const text = "ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é' –¥–ª—è –≤—ã—Ö–æ–¥–∞.";
    const keyboard = makeKeyboard([[{ text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', callback_data: 'stop_chat' }]]);
    const sentMessage = await sendMessage(chatId, text, env, keyboard);
    if (sentMessage.result) {
        dialog.messageId = sentMessage.result.message_id;
        state.dialog = dialog;
        await setUserState(chatId, state, env);
    }
}

async function continueAiChatDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update)!;
    const userInput = getUserInput(update);
    const dialog = state.dialog!;

    if (userInput === 'stop_chat' || userInput === '/stop') {
        state.dialog = null;
        await setUserState(chatId, state, env);
        if (dialog.messageId) {
            await editMessageText(chatId, dialog.messageId, '–°–µ—Å—Å–∏—è —Å AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', env);
        }
        await showMainMenu(chatId, null, env);
        return;
    }
    
    // This is where you would call the Gemini API
    await sendMessage(chatId, `ü§ñ –û—Ç–≤–µ—Ç AI –Ω–∞: "${userInput}"`, env);
}


// --- Add Bet Dialog ---

const getStepPrompt = (step: string): string => {
    switch(step) {
        case STEPS.SPORT: return 'üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:';
        case STEPS.EVENT: return '–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–ö–æ–º–∞–Ω–¥–∞ 1 - –ö–æ–º–∞–Ω–¥–∞ 2* (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ - –ë–∞—Ä—Å–µ–ª–æ–Ω–∞`)';
        case STEPS.OUTCOME: return '–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–ü1` –∏–ª–∏ `–¢–æ—Ç–∞–ª > 2.5`)';
        case STEPS.BET_TYPE: return 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:';
        case STEPS.STAKE: return '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `100` –∏–ª–∏ `150.50`)';
        case STEPS.ODDS: return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: `1.85`)';
        case STEPS.BOOKMAKER: return 'üëá –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–º–µ–∫–µ—Ä–∞:';
        case STEPS.CONFIRM: return '–í—Å—ë –≤–µ—Ä–Ω–æ?';
        case STEPS.PARLAY_ACTION: return '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–æ–±—ã—Ç–∏–µ –≤ —ç–∫—Å–ø—Ä–µ—Å—Å?';
        case STEPS.GOAL_TITLE: return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í—ã–π—Ç–∏ –≤ –ø–ª—é—Å –ø–æ —Ñ—É—Ç–±–æ–ª—É")';
        case STEPS.GOAL_METRIC: return '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è';
        case STEPS.GOAL_TARGET: return '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—á–∏—Å–ª–æ)';
        case STEPS.GOAL_DEADLINE: return '–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î';
        case STEPS.GOAL_CONFIRM: return '–°–æ–∑–¥–∞—Ç—å —ç—Ç—É —Ü–µ–ª—å?';
        default: return '';
    }
};

const getAddBetDialogText = (data: DialogState['data']): string => {
    let text = '*üìù –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞*\n\n';
    if(data.betType === BetType.Parlay) {
        text += data.legs.map((leg: any, i: number) => `*–°–æ–±—ã—Ç–∏–µ ${i+1}:* ${leg.homeTeam || '_?_'} vs ${leg.awayTeam || '_?_'} - *${leg.market || '_?_' }*`).join('\n') + '\n\n';
    } else if (data.legs && data.legs[0]) {
        const leg = data.legs[0];
        text += `- *–°–æ–±—ã—Ç–∏–µ:* ${leg.homeTeam || '_?_'} vs ${leg.awayTeam || '_?_'}\n`;
        text += `- *–ò—Å—Ö–æ–¥:* ${leg.market || '_–Ω–µ —É–∫–∞–∑–∞–Ω_'}\n`;
    }
    text += `- *–¢–∏–ø:* ${data.betType ? BET_TYPE_OPTIONS.find(o => o.value === data.betType)?.label : '_–Ω–µ —É–∫–∞–∑–∞–Ω_'}\n`;
    text += `- *–°—É–º–º–∞:* ${data.stake ? `${data.stake} ‚ÇΩ` : '_–Ω–µ —É–∫–∞–∑–∞–Ω–∞_'}\n`;
    text += `- *–ö–æ—ç—Ñ.:* ${data.odds || '_–Ω–µ —É–∫–∞–∑–∞–Ω_'}\n`;
    text += `- *–ë—É–∫–º–µ–∫–µ—Ä:* ${data.bookmaker || '_–Ω–µ —É–∫–∞–∑–∞–Ω_'}\n\n`;
    
    text += getStepPrompt(data.step);
    return text;
}


export async function startAddBetDialog(chatId: number, state: UserState, env: Env) {
    const dialog: DialogState = { type: DIALOG_TYPES.ADD_BET, step: STEPS.BET_TYPE, data: { legs: [] } };
    const text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:';
    const keyboard = makeKeyboard([
        [{ text: '–û–¥–∏–Ω–æ—á–Ω–∞—è', callback_data: 'add_bet_single' }, { text: '–≠–∫—Å–ø—Ä–µ—Å—Å', callback_data: 'add_bet_parlay' }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_dialog' }]
    ]);

    const sentMessage = await sendMessage(chatId, text, env, keyboard);

    if (sentMessage?.result) {
        dialog.messageId = sentMessage.result.message_id;
        state.dialog = dialog;
        await setUserState(chatId, state, env);
    }
}

async function continueAddBetDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update)!;
    const userInput = getUserInput(update);
    const dialog = state.dialog!;
    let keyboard;

    try {
        if (userInput === 'cancel_dialog') {
            state.dialog = null;
            await setUserState(chatId, state, env);
            await editMessageText(chatId, dialog.messageId!, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", env);
            await showMainMenu(chatId, null, env);
            return;
        }

        switch (dialog.step) {
            case STEPS.CONFIRM:
                if (userInput === 'dialog_confirm') {
                    const finalBetData = { ...dialog.data, status: BetStatus.Pending };
                    let newState = addBetToState(state, finalBetData as Omit<Bet, 'id'|'createdAt'|'event'>);
                    newState.dialog = null;
                    await updateAndSyncState(chatId, newState, env); // FIX: Use new sync function
                    await editMessageText(chatId, dialog.messageId!, `‚úÖ –°—Ç–∞–≤–∫–∞ –Ω–∞ "${newState.bets[0].event}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, env);
                    await showMainMenu(chatId, null, env);
                    return;
                }
            // ... other cases
        }

    } catch (error) {
        await sendMessage(chatId, `‚ö†Ô∏è ${error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'}`, env);
    }

    if (dialog.messageId) {
        await editMessageText(chatId, dialog.messageId, getAddBetDialogText(dialog.data), env, keyboard);
    }
    
    state.dialog = dialog;
    await setUserState(chatId, state, env);
}

// --- Add Goal Dialog ---

const getAddGoalDialogText = (data: DialogState['data']): string => {
    const metricLabels = { [GoalMetric.Profit]: '–ü—Ä–∏–±—ã–ª—å (‚ÇΩ)', [GoalMetric.ROI]: 'ROI (%)', [GoalMetric.WinRate]: '–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ (%)', [GoalMetric.BetCount]: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫' };
    let text = '*üéØ –ù–æ–≤–∞—è —Ü–µ–ª—å*\n\n';
    text += `- *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${data.title || '_–Ω–µ —É–∫–∞–∑–∞–Ω–æ_'}\n`;
    text += `- *–ú–µ—Ç—Ä–∏–∫–∞:* ${data.metric ? metricLabels[data.metric as GoalMetric] : '_–Ω–µ —É–∫–∞–∑–∞–Ω–∞_'}\n`;
    text += `- *–¶–µ–ª—å:* ${data.targetValue || '_–Ω–µ —É–∫–∞–∑–∞–Ω–∞_'}\n`;
    text += `- *–î–µ–¥–ª–∞–π–Ω:* ${data.deadline || '_–Ω–µ —É–∫–∞–∑–∞–Ω_'}\n\n`;
    text += getStepPrompt(data.step);
    return text;
};

export async function startAddGoalDialog(chatId: number, state: UserState, env: Env) {
    const dialog: DialogState = { type: DIALOG_TYPES.ADD_GOAL, step: STEPS.GOAL_TITLE, data: {} };
    const text = getAddGoalDialogText(dialog.data);
    const sentMessage = await sendMessage(chatId, text, env);

    if (sentMessage?.result) {
        dialog.messageId = sentMessage.result.message_id;
        state.dialog = dialog;
        await setUserState(chatId, state, env);
    }
}

async function continueAddGoalDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update)!;
    const userInput = getUserInput(update);
    const dialog = state.dialog!;
    let keyboard;

    try {
        if (userInput === 'cancel_dialog') {
            state.dialog = null;
            await setUserState(chatId, state, env);
            await editMessageText(chatId, dialog.messageId!, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", env);
            const fakeCallbackQuery: TelegramCallbackQuery = { id: 'fake', from: update.callback_query!.from, message: update.callback_query!.message, data: buildGoalCb(GOAL_ACTIONS.LIST) };
            const fakeUpdate: TelegramUpdate = { update_id: 0, callback_query: fakeCallbackQuery };
            await (await import('./goals')).startManageGoals(fakeUpdate, state, env);
            return;
        }

        switch (dialog.step) {
            case STEPS.GOAL_TITLE:
                if (!userInput) return;
                dialog.data.title = userInput;
                dialog.step = STEPS.GOAL_METRIC;
                break;
            case STEPS.GOAL_METRIC:
                if (!userInput?.startsWith('goal_metric_')) return;
                dialog.data.metric = userInput.replace('goal_metric_', '');
                dialog.step = STEPS.GOAL_TARGET;
                break;
            case STEPS.GOAL_TARGET:
                if (!userInput) return;
                const target = parseFloat(userInput);
                if (isNaN(target)) throw new Error("–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
                dialog.data.targetValue = target;
                dialog.step = STEPS.GOAL_DEADLINE;
                break;
            case STEPS.GOAL_DEADLINE:
                if (!userInput || !/^\d{4}-\d{2}-\d{2}$/.test(userInput)) {
                    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.");
                }
                dialog.data.deadline = userInput;
                dialog.step = STEPS.GOAL_CONFIRM;
                break;
             case STEPS.GOAL_CONFIRM:
                if (userInput === 'goal_confirm') {
                    let newState = addGoalToState(state, dialog.data as any);
                    newState.dialog = null;
                    await updateAndSyncState(chatId, newState, env); // FIX: Use new sync function
                    await editMessageText(chatId, dialog.messageId!, `‚úÖ –¶–µ–ª—å "${dialog.data.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`, env);
                    
                    const fakeCallbackQuery: TelegramCallbackQuery = { id: 'fake', from: update.callback_query!.from, message: update.callback_query!.message, data: buildGoalCb(GOAL_ACTIONS.LIST) };
                    const fakeUpdate: TelegramUpdate = { update_id: 0, callback_query: fakeCallbackQuery };
                    await (await import('./goals')).startManageGoals(fakeUpdate, newState, env);
                    return;
                }
                return;
        }
    } catch (error) {
        await sendMessage(chatId, `‚ö†Ô∏è ${error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'}`, env);
    }
    
    switch(dialog.step) {
        case STEPS.GOAL_METRIC:
            keyboard = makeKeyboard([
                [{ text: '–ü—Ä–∏–±—ã–ª—å (‚ÇΩ)', callback_data: 'goal_metric_profit' }, { text: 'ROI (%)', callback_data: 'goal_metric_roi'}],
                [{ text: '–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ (%)', callback_data: 'goal_metric_win_rate' }, { text: '–ö–æ–ª-–≤–æ —Å—Ç–∞–≤–æ–∫', callback_data: 'goal_metric_bet_count'}]
            ]);
            break;
        case STEPS.GOAL_CONFIRM:
            keyboard = makeKeyboard([
                [{ text: '‚úÖ –°–æ–∑–¥–∞—Ç—å', callback_data: 'goal_confirm'}, { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_dialog'}]
            ]);
            break;
    }

    if (dialog.messageId) {
        await editMessageText(chatId, dialog.messageId, getAddGoalDialogText(dialog.data), env, keyboard);
    }
    
    state.dialog = dialog;
    await setUserState(chatId, state, env);
}