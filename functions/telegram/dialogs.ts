// functions/telegram/dialogs.ts
import { TelegramUpdate, UserState, Env, Dialog, Bet, BetType, BetStatus, Goal, GoalMetric } from './types';
import { editMessageText, sendMessage, deleteMessage } from './telegramApi';
import { makeKeyboard } from './ui';
import { addBetToState, addGoalToState, updateAndSyncState } from './state';
import { showMainMenu } from './ui';
import { SPORTS } from '../constants';
import { GoogleGenAI } from "@google/genai";
import { analyticsToText, calculateAnalytics } from './analytics';
import { CB } from './router';

const createMatchAnalysisPrompt = (matchQuery: string) => {
  return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç—á –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${matchQuery}".
–î–ê–¢–ê –ê–ù–ê–õ–ò–ó–ê: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –¥–∞—Ç—É.

–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–∏—Å–∫:
- –¢–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥, —Ç—É—Ä–Ω–∏—Ä –∏ –¥–∞—Ç—É –º–∞—Ç—á–∞.
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã).
- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–≤–º—ã –∏ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
- 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.
- –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏–≥—Ä—ã –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã.
- –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–ø–æ–≥–æ–¥–∞, —Å—É–¥—å—è, —É—Å—Ç–∞–ª–æ—Å—Ç—å).

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –≤–∫–ª—é—á–∞—é—â–∏–π —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Ç—Ä–∏ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è. 

–í –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–∞–π –∏—Ç–æ–≥–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ö–æ–¥—ã (–ü1, X, –ü2) –≤ –≤–∏–¥–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏: –ü1 - 45%, X - 30%, –ü2 - 25%". –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–Ω–∫–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏.`;
};


// --- DIALOG STARTERS ---

export async function startAddBetDialog(chatId: number, state: UserState, env: Env, messageIdToEdit: number | null) {
    const dialog: Dialog = {
        type: 'add_bet',
        step: 'sport',
        messageId: messageIdToEdit || 0,
        data: {},
    };
    const newState = { ...state, dialog };
    

    const text = "‚öΩ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:";
    const sportButtons = SPORTS.map(sport => ({ text: sport, callback_data: `dialog|${sport}` }));
    const keyboard = makeKeyboard([
        sportButtons.slice(0, 3),
        sportButtons.slice(3, 6),
        sportButtons.slice(6),
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'dialog|cancel' }]
    ]);

    let finalMessageId = messageIdToEdit;
    if (messageIdToEdit) {
        await editMessageText(chatId, messageIdToEdit, text, env, keyboard);
    } else {
        const sentMessage = await sendMessage(chatId, text, env, keyboard);
        finalMessageId = sentMessage.result.message_id;
    }
    newState.dialog!.messageId = finalMessageId!;
    await updateAndSyncState(chatId, newState, env);
}

export async function startAddGoalDialog(chatId: number, state: UserState, env: Env, messageIdToEdit: number | null) {
    const dialog: Dialog = {
        type: 'add_goal',
        step: 'title',
        messageId: messageIdToEdit || 0,
        data: {}
    };
    const newState = { ...state, dialog };
    

    const text = "üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—ã–π—Ç–∏ –≤ –ø–ª—é—Å –ø–æ —Ñ—É—Ç–±–æ–ª—É'):";
    let finalMessageId = messageIdToEdit;
    if(messageIdToEdit) {
        await editMessageText(chatId, messageIdToEdit, text, env);
    } else {
        const sentMessage = await sendMessage(chatId, text, env);
        finalMessageId = sentMessage.result.message_id;
    }
    newState.dialog!.messageId = finalMessageId!;
    await updateAndSyncState(chatId, newState, env);
}

export async function startAiChatDialog(chatId: number, state: UserState, env: Env, messageIdToEdit: number | null) {
    const dialog: Dialog = {
        type: 'ai_chat',
        step: 'prompt',
        messageId: messageIdToEdit || 0,
        data: { history: [] }
    };
    const newState = { ...state, dialog };

    const text = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º! \n\n–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —à–∞–±–ª–æ–Ω–æ–º. \n\n_–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /exit._";
    const keyboard = makeKeyboard([
        [{ text: 'üîç –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞', callback_data: 'dialog|start_match_analysis' }]
    ]);

    let finalMessageId = messageIdToEdit;
     if(messageIdToEdit) {
        await editMessageText(chatId, messageIdToEdit, text, env, keyboard);
    } else {
        const sentMessage = await sendMessage(chatId, text, env, keyboard);
        finalMessageId = sentMessage.result.message_id;
    }
    newState.dialog!.messageId = finalMessageId!;
    await updateAndSyncState(chatId, newState, env);
}


// --- DIALOG HANDLER ---

export async function continueDialog(update: TelegramUpdate, state: UserState, env: Env) {
    if (!state.dialog) return;
    const chatId = update.message?.chat.id || update.callback_query?.message.chat.id!;
    const message = update.message;

    if ((message?.text === '/exit') || (update.callback_query?.data === 'dialog|cancel')) {
        await endDialog(state.dialog.messageId, chatId, env, state, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        return;
    }

    if (message?.text) {
        if (state.dialog.type === 'register' || state.dialog.type === 'login') {
            try {
                await deleteMessage(chatId, message.message_id, env);
            } catch(e) { console.warn(`Could not delete user message: ${e}`); }
        }
    }


    switch (state.dialog.type) {
        case 'add_bet':
            await handleAddBetDialog(update, state, env);
            break;
        case 'add_goal':
            await handleAddGoalDialog(update, state, env);
            break;
        case 'ai_chat':
            await handleAiChatDialog(update, state, env);
            break;
        default:
            await endDialog(state.dialog.messageId, chatId, env, state, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞.");
    }
}

async function endDialog(messageId: number, chatId: number, env: Env, state: UserState, endText: string) {
    try {
        if (messageId) {
            await deleteMessage(chatId, messageId, env);
        }
    } catch (e) { console.warn(`Could not delete dialog message: ${e}`); }
    
    const newState = { ...state, dialog: null };
    await updateAndSyncState(chatId, newState, env);
    await showMainMenu(chatId, null, env, endText);
}


// --- SPECIFIC DIALOG IMPLEMENTATIONS ---

async function handleAddBetDialog(update: TelegramUpdate, state: UserState, env: Env) {
    // ... (Implementation unchanged)
}

async function handleAddGoalDialog(update: TelegramUpdate, state: UserState, env: Env) {
    // ... (Implementation unchanged)
}

async function handleAiChatDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = update.message?.chat.id || update.callback_query?.message.chat.id!;
    const messageId = state.dialog!.messageId;
    const text = update.message?.text;

    if (update.callback_query?.data === 'dialog|start_match_analysis') {
        const newState = { ...state, dialog: { ...state.dialog!, step: 'awaiting_match_name' } };
        await updateAndSyncState(chatId, newState, env);
        await editMessageText(chatId, messageId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ - –ë–∞—Ä—Å–µ–ª–æ–Ω–∞'):", env);
        return;
    }

    if (state.dialog!.step === 'awaiting_match_name') {
        if (!text) return; // Ignore non-text messages
        
        await sendMessage(chatId, "ü§ñ _–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è._", env);
        const fullPrompt = createMatchAnalysisPrompt(text);
        
        try {
            const ai = new GoogleGenAI({ apiKey: env.GEMINI_API_KEY });
            const result = await ai.models.generateContent({
                model: "gemini-2.5-flash",
                contents: [{ role: 'user', parts: [{ text: fullPrompt }] }],
                tools: [{googleSearch: {}}],
            });
            await sendMessage(chatId, result.text, env);
        } catch(e) {
            console.error("AI Match Analysis Error:", e);
            await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", env);
        } finally {
            // Reset to general chat mode
            const newState = { ...state, dialog: { ...state.dialog!, step: 'prompt' } };
            await updateAndSyncState(chatId, newState, env);
            await startAiChatDialog(chatId, newState, env, null); // Re-display the chat menu
        }
        return;
    }


    if (!text) return;
    
    if (text.toLowerCase() === '/exit') {
        await endDialog(state.dialog!.messageId, chatId, env, state, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ —Å AI.");
        return;
    }

    const ai = new GoogleGenAI({ apiKey: env.GEMINI_API_KEY });
    await sendMessage(chatId, "ü§ñ _AI –¥—É–º–∞–µ—Ç..._", env);

    try {
        const history = state.dialog!.data.history || [];
        const contents = history.map((msg: any) => ({
            role: msg.role,
            parts: [{ text: msg.text }],
        }));
        contents.push({ role: 'user', parts: [{ text: text }] });
        
        let systemInstruction = "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í –∫–æ–Ω—Ü–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –º–∞—Ç—á –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ö–æ–¥—ã (–ü1, X, –ü2) –≤ –≤–∏–¥–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏: –ü1 - 45%, X - 30%, –ü2 - 25%\". –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–Ω–∫–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏.";
        if (history.length === 0) {
            contents[0].parts[0].text += `\n\n–í–æ—Ç –º–æ—è —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${analyticsToText(calculateAnalytics(state))}`;
        }
        
        const result = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: contents,
            config: { systemInstruction },
            tools: [{googleSearch: {}}],
        });

        await sendMessage(chatId, result.text, env);

        history.push({ role: 'user', text: text });
        history.push({ role: 'model', text: result.text });
        const newState = { ...state, dialog: { ...state.dialog!, data: { history } } };
        await updateAndSyncState(chatId, newState, env);

    } catch (e) {
        console.error("AI Chat Dialog Error:", e);
        await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", env);
    }
}