// functions/telegram/dialogs.ts
import { TelegramUpdate, UserState, Env, DialogState, BetType, BetStatus, GoalMetric, Message, BetLeg, GoalStatus, Goal } from './types';
import { setUserState, addBetToState, updateAndSyncState, addGoalToState } from './state';
import { sendMessage, editMessageText, deleteMessage, reportError } from './telegramApi';
import { showMainMenu, makeKeyboard } from './ui';
import { SPORTS, MARKETS_BY_SPORT, BOOKMAKERS, COMMON_ODDS } from '../constants';
import { CB } from './router';
import { GoogleGenAI } from '@google/genai';
import { calculateAnalytics } from './analytics';

const chunk = <T,>(arr: T[], size: number): T[][] =>
  Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>
    arr.slice(i * size, i * size + size)
  );

// --- DIALOG MANAGEMENT ---

async function endDialog(chatId: number, state: UserState, env: Env, successText: string = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.") {
    if (state.dialog && state.dialog.messageId) {
        try {
            // Edit the message to show the final status, then show the main menu in a new message
            await editMessageText(chatId, state.dialog.messageId, `üèÅ ${successText}`, env);
        } catch (e) { 
            console.warn(`Could not edit final dialog message: ${e}`);
            await sendMessage(chatId, `üèÅ ${successText}`, env);
        }
    }
    const newState = { ...state, dialog: null };
    await setUserState(chatId, newState, env);
    await showMainMenu(chatId, null, env);
}


// --- ADD BET DIALOG ---

export async function startAddBetDialog(chatId: number, state: UserState, env: Env) {
    const dialog: DialogState = {
        type: 'add_bet',
        step: 'select_sport',
        data: { legs: [], betType: BetType.Single, status: BetStatus.Pending },
    };
    const text = "üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:";
    const keyboard = makeKeyboard([
        ...chunk(SPORTS.map(s => ({ text: s, callback_data: s })), 2),
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }],
    ]);
    const sentMessage = await sendMessage(chatId, text, env, keyboard);
    const newState = { ...state, dialog: { ...dialog, messageId: sentMessage.result.message_id } };
    await setUserState(chatId, newState, env);
}

async function handleAddBetResponse(update: TelegramUpdate, state: UserState, env: Env) {
    // This function is still a placeholder as the main reported issues are goals and competitions.
    // A full implementation would be similar to handleAddGoalResponse.
    const chatId = update.message?.chat.id || update.callback_query?.message.chat.id;
    if (!chatId) return;
    await sendMessage(chatId, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", env);
    await endDialog(chatId, state, env, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
}


// --- AI CHAT DIALOG ---

export async function startAiChatDialog(chatId: number, state: UserState, env: Env) {
    const dialog: DialogState = {
        type: 'ai_chat',
        step: 'chatting',
        data: { history: [] },
    };
    const text = "ü§ñ *AI-–ê–Ω–∞–ª–∏—Ç–∏–∫*\n\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç—á –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ —Å–æ–≤–µ—Ç–∞. –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop.";
    await sendMessage(chatId, text, env);
    await setUserState(chatId, { ...state, dialog }, env);
}

async function handleAiChatResponse(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message;
    if (!message?.text || !state.dialog) return;

    const chatId = message.chat.id;
    const userMessage: Message = { role: 'user', text: message.text };
    const history = [...(state.dialog.data.history || []), userMessage];

    const thinkingMsg = await sendMessage(chatId, "‚è≥ –î—É–º–∞—é...", env);

    const ai = new GoogleGenAI({ apiKey: env.GEMINI_API_KEY });
    const analytics = calculateAnalytics(state);
    
    const prompt = `User analytics summary: ROI is ${analytics.roi.toFixed(2)}%, Win rate is ${analytics.winRate.toFixed(2)}%. User question: ${message.text}`;
    
    const result = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: [{ role: 'user', parts: [{text: prompt}]}],
        config: {
            systemInstruction: "You are a helpful betting analyst assistant for a Telegram bot. Keep answers concise and helpful. Answer in Russian.",
        }
    });

    const modelResponse = result.text;
    const modelMessage: Message = { role: 'model', text: modelResponse };
    
    await deleteMessage(chatId, thinkingMsg.result.message_id, env);
    await sendMessage(chatId, modelResponse, env);

    const newDialog = { ...state.dialog, data: { history: [...history, modelMessage] } };
    await setUserState(chatId, { ...state, dialog: newDialog }, env);
}


// --- ADD GOAL DIALOG ---

export async function startAddGoalDialog(chatId: number, state: UserState, env: Env, messageId: number) {
     const dialog: DialogState = {
        type: 'add_goal',
        step: 'explanation',
        data: {},
        messageId: messageId,
    };
    const text = `üéØ *–î–∞–≤–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∏–º —Ü–µ–ª—å!*

–•–æ—Ä–æ—à–∞—è —Ü–µ–ª—å –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å SMART-—Ü–µ–ª—å: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é, –∏–∑–º–µ—Ä–∏–º—É—é, –¥–æ—Å—Ç–∏–∂–∏–º—É—é, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏.

*–ü—Ä–∏–º–µ—Ä—ã:*
- *–ü—Ä–∏–±—ã–ª—å:* –î–æ—Å—Ç–∏—á—å +5000 ‚ÇΩ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Ñ—É—Ç–±–æ–ª–µ –∑–∞ –º–µ—Å—è—Ü.
- *ROI:* –î–æ–±–∏—Ç—å—Å—è ROI 10% –Ω–∞ —Å—Ç–∞–≤–∫–∞—Ö —Å –∫–æ—ç—Ñ. > 2.0 –∑–∞ 3 –º–µ—Å—è—Ü–∞.

–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`;
    const keyboard = makeKeyboard([
        [{ text: "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data: 'start_goal_dialog' }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: 'cancel' }]
    ]);

    await editMessageText(chatId, messageId, text, env, keyboard);
    await setUserState(chatId, { ...state, dialog }, env);
}

async function handleAddGoalResponse(update: TelegramUpdate, state: UserState, env: Env) {
    const { dialog } = state;
    if (!dialog || !dialog.messageId) return;

    const chatId = update.callback_query?.message.chat.id || update.message!.chat.id;
    const messageId = dialog.messageId;
    const answer = update.callback_query?.data || update.message?.text || '';

    let newDialogState = { ...dialog };
    let text = '';
    let keyboard: any;

    switch (dialog.step) {
        case 'explanation':
            newDialogState.step = 'enter_title';
            text = "üìù *–®–∞–≥ 1/5:* –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—ã–π—Ç–∏ –≤ –ø–ª—é—Å –ø–æ —Ñ—É—Ç–±–æ–ª—É').";
            keyboard = makeKeyboard([[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]]);
            break;
        
        case 'enter_title':
            newDialogState.data.title = answer;
            newDialogState.step = 'select_metric';
            text = `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: *${answer}*\n\n*–®–∞–≥ 2/5:* –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.`;
            keyboard = makeKeyboard([
                [{ text: '–ü—Ä–∏–±—ã–ª—å (‚ÇΩ)', callback_data: GoalMetric.Profit }, { text: 'ROI (%)', callback_data: GoalMetric.ROI }],
                [{ text: '–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ (%)', callback_data: GoalMetric.WinRate }, { text: '–ö–æ–ª-–≤–æ —Å—Ç–∞–≤–æ–∫', callback_data: GoalMetric.BetCount }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
            ]);
            break;

        case 'select_metric':
            newDialogState.data.metric = answer;
            newDialogState.step = 'enter_target';
            text = `‚úÖ –ú–µ—Ç—Ä–∏–∫–∞: *${answer}*\n\n*–®–∞–≥ 3/5:* –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, '5000' –¥–ª—è –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ '10' –¥–ª—è ROI.`;
            keyboard = makeKeyboard([[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]]);
            break;

        case 'enter_target':
            const target = parseFloat(answer);
            if (isNaN(target)) {
                text = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000 –∏–ª–∏ -200).";
                // Don't change step, wait for correct input
                keyboard = makeKeyboard([[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]]);
            } else {
                newDialogState.data.targetValue = target;
                newDialogState.step = 'select_deadline';
                text = `‚úÖ –¶–µ–ª—å: *${answer}*\n\n*–®–∞–≥ 4/5:* –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏.`;
                keyboard = makeKeyboard([
                    [{ text: '–ù–µ–¥–µ–ª—è', callback_data: 'week' }, { text: '–ú–µ—Å—è—Ü', callback_data: 'month' }, { text: '–ö–≤–∞—Ä—Ç–∞–ª', callback_data: 'quarter' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
                ]);
            }
            break;
            
        case 'select_deadline':
            const deadline = new Date();
            if (answer === 'week') deadline.setDate(deadline.getDate() + 7);
            else if (answer === 'month') deadline.setMonth(deadline.getMonth() + 1);
            else if (answer === 'quarter') deadline.setMonth(deadline.getMonth() + 3);
            
            newDialogState.data.deadline = deadline.toISOString();
            newDialogState.step = 'confirm';
            
            // For simplicity, we skip scope selection in this version
            newDialogState.data.scope = { type: 'all' };

            text = `*‚ú® –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:*
            
- *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${newDialogState.data.title}
- *–ú–µ—Ç—Ä–∏–∫–∞:* ${newDialogState.data.metric}
- *–¶–µ–ª—å:* ${newDialogState.data.targetValue}
- *–î–µ–¥–ª–∞–π–Ω:* ${deadline.toLocaleDateString('ru-RU')}

–í—Å—ë –≤–µ—Ä–Ω–æ?`;
            keyboard = makeKeyboard([
                [{ text: '‚úÖ –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å', callback_data: 'confirm' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
            ]);
            break;
            
        case 'confirm':
            if (answer === 'confirm') {
                const goalData: Omit<Goal, 'id' | 'createdAt' | 'currentValue' | 'status'> = {
                    title: newDialogState.data.title,
                    metric: newDialogState.data.metric,
                    targetValue: newDialogState.data.targetValue,
                    deadline: newDialogState.data.deadline,
                    scope: newDialogState.data.scope,
                };
                const newState = addGoalToState(state, goalData);
                await updateAndSyncState(chatId, newState, env);
                // FIX: Pass the updated newState to endDialog to prevent state rollback.
                await endDialog(chatId, newState, env, "–ù–æ–≤–∞—è —Ü–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
                return; 
            } else {
                await endDialog(chatId, state, env);
                return;
            }

        default:
            await endDialog(chatId, state, env, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.");
            return;
    }
    
    await editMessageText(chatId, messageId, text, env, keyboard);
    await setUserState(chatId, { ...state, dialog: newDialogState }, env);
}


// --- MAIN DIALOG ROUTER ---

export async function continueDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message;
    const callbackQuery = update.callback_query;
    const chatId = message?.chat.id || callbackQuery?.message.chat.id;

    if (!chatId || !state.dialog) return;

    if ((message?.text && (message.text === '/stop' || message.text === '/cancel')) || (callbackQuery?.data === 'cancel')) {
        await endDialog(chatId, state, env);
        return;
    }

    try {
        switch (state.dialog.type) {
            case 'add_bet':
                await handleAddBetResponse(update, state, env);
                break;
            case 'ai_chat':
                await handleAiChatResponse(update, state, env);
                break;
            case 'add_goal':
                await handleAddGoalResponse(update, state, env);
                break;
        }
    } catch(error) {
        await reportError(chatId, env, `Dialog (${state.dialog.type})`, error);
        await setUserState(chatId, {...state, dialog: null }, env); // Abort dialog on error
    }
}