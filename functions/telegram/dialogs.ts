// functions/telegram/dialogs.ts
import { TelegramUpdate, UserState, Env, Dialog, GoalMetric, Goal, User, Bet, BankTransaction } from './types';
import { setUserState, addGoalToState, updateAndSyncState } from './state';
import { sendMessage, editMessageText } from './telegramApi';
import { makeKeyboard, showMainMenu } from './ui';
import { GoogleGenAI } from "@google/genai";
import { formatDetailedReportText, calculateAnalytics } from './analytics';
import { CB } from './router';
import { findUserBy, mockHash } from '../data/userStore';

// Main dialog router
export async function continueDialog(update: TelegramUpdate, state: UserState, env: Env): Promise<void> {
    const dialog = state.dialog;
    if (!dialog) return;

    switch (dialog.type) {
        case 'add_goal':
            // await continueAddGoalDialog(update, state, env);
            break;
        case 'add_bet':
             // await continueAddBetDialog(update, state, env);
             break;
        case 'ai_chat':
            await continueAiChatDialog(update, state, env);
            break;
        case 'register':
            await handleRegistrationResponse(update, state, env);
            break;
        case 'login':
            await handleLoginResponse(update, state, env);
            break;
        default:
            const chatId = update.message!.chat.id;
            await sendMessage(chatId, "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø).", env);
            const newState = { ...state, dialog: null };
            await setUserState(chatId, newState, env);
            break;
    }
}

// Dummy placeholder to avoid errors
export async function startAddBetDialog(chatId: number, state: UserState, env: Env, messageId: number | null) {
    await sendMessage(chatId, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", env);
}

// --- AI Chat Dialog ---

export async function startAiChatDialog(chatId: number, state: UserState, env: Env, messageIdToEdit: number | null): Promise<void> {
    const dialog: Dialog = { type: 'ai_chat', step: 'prompt', messageId: 0 };
    const newState: UserState = { ...state, dialog };
    
    const text = "ü§ñ –° —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å? –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –º–∞—Ç—á–µ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–æ–≤–µ—Ç–∞.";
    const keyboard = makeKeyboard([[{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: CB.BACK_TO_MAIN }]]);

    let sentMessage;
    if (messageIdToEdit) {
        sentMessage = await editMessageText(chatId, messageIdToEdit, text, env, keyboard);
    } else {
        sentMessage = await sendMessage(chatId, text, env, keyboard);
    }
    
    newState.dialog!.messageId = sentMessage.result.message_id;
    await setUserState(chatId, newState, env);
}

async function continueAiChatDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = update.message!.chat.id;
    const text = update.message!.text;

    if (!text) {
        await sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.", env);
        return;
    }

    const ai = new GoogleGenAI({ apiKey: env.GEMINI_API_KEY });
    
    await editMessageText(chatId, state.dialog!.messageId, "ü§ñ _–î—É–º–∞—é..._", env);

    const analytics = calculateAnalytics(state);
    const context = formatDetailedReportText(analytics);
    const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n${context}\n\n–ú–æ–π –≤–æ–ø—Ä–æ—Å: "${text}"`;

    try {
        const result = await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: [{ role: 'user', parts: [{ text: prompt }] }],
        });
        
        await editMessageText(chatId, state.dialog!.messageId, result.text, env, makeKeyboard([[{ text: '‚óÄÔ∏è –í –º–µ–Ω—é', callback_data: CB.BACK_TO_MAIN }]]));

    } catch(e) {
        console.error("AI chat error", e);
        await editMessageText(chatId, state.dialog!.messageId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.", env);
    } finally {
        const newState = { ...state, dialog: null };
        await setUserState(chatId, newState, env);
    }
}

// --- Registration Dialog ---

export async function startRegistrationDialog(chatId: number, state: UserState, env: Env, messageId: number): Promise<void> {
    const dialog: Dialog = { type: 'register', step: 'email', messageId };
    const newState: UserState = { ...state, dialog };
    await setUserState(chatId, newState, env);
    await editMessageText(chatId, messageId, "üöÄ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", env);
}

async function handleRegistrationResponse(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message!;
    const dialog = state.dialog!;
    const text = message.text?.trim();
    const chatId = message.chat.id;

    if (!text) { await sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.", env); return; }

    let nextStep = dialog.step;
    let nextData = dialog.data || {};
    let responseText = '';

    try {
        switch (dialog.step) {
            case 'email':
                if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text)) throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                if (await findUserBy(u => u.email === text, env)) throw new Error("–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.");
                
                nextData.email = text;
                nextStep = 'nickname';
                responseText = `‚úÖ Email –ø—Ä–∏–Ω—è—Ç.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞):`;
                break;

            case 'nickname':
                if (text.length < 3) throw new Error("–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.");
                if (await findUserBy(u => u.nickname.toLowerCase() === text.toLowerCase(), env)) throw new Error("–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.");

                nextData.nickname = text;
                nextStep = 'password';
                responseText = `‚úÖ –ù–∏–∫–Ω–µ–π–º —Å–≤–æ–±–æ–¥–µ–Ω.\n\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):`;
                break;
                
            case 'password':
                if (text.length < 6) throw new Error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.");
                
                const newUser: User = { 
                    email: nextData.email, 
                    nickname: nextData.nickname,
                    password_hash: mockHash(text),
                    registeredAt: new Date().toISOString(),
                    referralCode: `${nextData.nickname.toUpperCase().replace(/\s/g, '')}${Date.now().toString().slice(-4)}`,
                    buttercups: 0,
                    status: 'active',
                };
                
                const initialUserState: UserState = {
                    user: newUser,
                    bets: [],
                    bankroll: 10000,
                    goals: [],
                    bankHistory: [],
                    dialog: null,
                };

                await updateAndSyncState(chatId, initialUserState, env);
                await sendMessage(chatId, `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${newUser.nickname}!`, env);
                await showMainMenu(chatId, null, env);
                return; // Exit dialog
        }

        const newDialog: Dialog = { ...dialog, step: nextStep, data: nextData };
        await setUserState(chatId, { ...state, dialog: newDialog }, env);
        await editMessageText(chatId, dialog.messageId, responseText, env);

    } catch (e: any) {
        await sendMessage(chatId, `‚ùå ${e.message}`, env);
    }
}

// --- Login Dialog ---

export async function startLoginDialog(chatId: number, state: UserState, env: Env, messageId: number): Promise<void> {
    const dialog: Dialog = { type: 'login', step: 'email', messageId };
    await setUserState(chatId, { ...state, dialog }, env);
    await editMessageText(chatId, messageId, "üîë *–í—Ö–æ–¥*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", env);
}

async function handleLoginResponse(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message!;
    const dialog = state.dialog!;
    const text = message.text?.trim();
    const chatId = message.chat.id;

    if (!text) { await sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.", env); return; }

    try {
        switch (dialog.step) {
            case 'email':
                const userExists = await findUserBy(u => u.email === text, env);
                if (!userExists) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.");
                
                dialog.data = { email: text };
                dialog.step = 'password';
                await setUserState(chatId, { ...state, dialog }, env);
                await editMessageText(chatId, dialog.messageId, "‚úÖ Email –Ω–∞–π–¥–µ–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:", env);
                break;

            case 'password':
                const user = await findUserBy(u => u.email === dialog.data.email, env);
                if (user && user.password_hash === mockHash(text)) {
                    if (user.status === 'blocked') throw new Error("–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
                    
                    const key = `betdata:${user.email}`;
                    const userDataStr = await env.BOT_STATE.get(key);
                    const userData = userDataStr ? JSON.parse(userDataStr) : { user, bets: [], bankroll: 10000, goals: [], bankHistory: [] };

                    const finalState: UserState = { ...userData, dialog: null };
                    await updateAndSyncState(chatId, finalState, env);
                    
                    await sendMessage(chatId, `‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.nickname}!`, env);
                    await showMainMenu(chatId, null, env);

                } else {
                    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                break;
        }
    } catch (e: any) {
        await sendMessage(chatId, `‚ùå ${e.message}`, env);
        // On password error, restart login flow for simplicity
        if (dialog.step === 'password') {
            const finalState = { ...state, dialog: null };
            await setUserState(chatId, finalState, env);
            await showMainMenu(chatId, dialog.messageId, env, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.");
        }
    }
}


// --- Add Goal Dialog ---

export async function startAddGoalDialog(chatId: number, state: UserState, env: Env, messageIdToEdit: number | null): Promise<void> {
    const dialog: Dialog = { type: 'add_goal', step: 'title', messageId: 0, data: {} };
    const text = "üéØ *–ù–æ–≤–∞—è —Ü–µ–ª—å*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—ã–π—Ç–∏ –≤ –ø–ª—é—Å –ø–æ —Ñ—É—Ç–±–æ–ª—É').";
    
    let sentMessage;
    if (messageIdToEdit) {
       sentMessage = await editMessageText(chatId, messageIdToEdit, text, env);
    } else {
       sentMessage = await sendMessage(chatId, text, env);
    }
    
    dialog.messageId = sentMessage.result.message_id;
    await setUserState(chatId, { ...state, dialog }, env);
}