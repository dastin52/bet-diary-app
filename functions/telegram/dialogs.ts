// functions/telegram/dialogs.ts
import { TelegramUpdate, UserState, Env, Dialog, GoalMetric, Goal } from './types';
import { setUserState, addGoalToState, updateAndSyncState } from './state';
import { sendMessage, editMessageText } from './telegramApi';
import { showGoalsMenu } from './goals'; // Assuming goals has its own menu display function
import { makeKeyboard } from './ui';
import { GoogleGenAI } from "@google/genai";
import { formatDetailedReportText, calculateAnalytics } from './analytics';
import { CB } from './router';

// Main dialog router
export async function continueDialog(update: TelegramUpdate, state: UserState, env: Env): Promise<void> {
    const dialog = state.dialog;
    if (!dialog) return;

    switch (dialog.type) {
        case 'add_goal':
            await continueAddGoalDialog(update, state, env);
            break;
        case 'ai_chat':
            await continueAiChatDialog(update, state, env);
            break;
        default:
            // Fallback for unknown dialogs
            const chatId = update.message!.chat.id;
            await sendMessage(chatId, "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø).", env);
            const newState = { ...state, dialog: null };
            await setUserState(chatId, newState, env);
            break;
    }
}

// --- AI Chat Dialog ---

export async function startAiChatDialog(chatId: number, state: UserState, env: Env, messageIdToEdit: number | null): Promise<void> {
    const dialog: Dialog = { type: 'ai_chat', step: 'prompt', messageId: messageIdToEdit! };
    const newState: UserState = { ...state, dialog };
    
    const text = "ü§ñ –° —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å? –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –º–∞—Ç—á–µ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–æ–≤–µ—Ç–∞.";
    const keyboard = makeKeyboard([[{ text: '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: CB.BACK_TO_MAIN }]]);

    let sentMessage;
    if (messageIdToEdit) {
        sentMessage = await editMessageText(chatId, messageIdToEdit, text, env, keyboard);
    } else {
        sentMessage = await sendMessage(chatId, text, env, keyboard);
    }
    
    newState.dialog!.messageId = sentMessage.result.message_id;
    await setUserState(chatId, newState, env);
}

async function continueAiChatDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = update.message!.chat.id;
    const text = update.message!.text;

    if (!text) {
        await sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.", env);
        return;
    }

    const ai = new GoogleGenAI({ apiKey: env.GEMINI_API_KEY });
    const model = ai.models['gemini-2.5-flash'];

    await sendMessage(chatId, "_ü§ñ –î—É–º–∞—é..._", env);

    const analytics = calculateAnalytics(state);
    const context = formatDetailedReportText(analytics);
    
    const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n${context}\n\n–ú–æ–π –≤–æ–ø—Ä–æ—Å: "${text}"`;

    const result = await model.generateContent(prompt);
    const response = await result.text;
    
    await sendMessage(chatId, response, env);

    // End the dialog after one response
    const newState = { ...state, dialog: null };
    await updateAndSyncState(chatId, newState, env);
    await sendMessage(chatId, "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å? (–¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω)", env);
}


// --- Add Goal Dialog ---

export async function startAddGoalDialog(chatId: number, state: UserState, env: Env, messageIdToEdit: number | null): Promise<void> {
    const dialog: Dialog = { type: 'add_goal', step: 'title', messageId: messageIdToEdit!, data: {} };
    const newState: UserState = { ...state, dialog };
    
    const text = "üéØ *–ù–æ–≤–∞—è —Ü–µ–ª—å*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—ã–π—Ç–∏ –≤ –ø–ª—é—Å –ø–æ —Ñ—É—Ç–±–æ–ª—É').";
    
    let sentMessage;
    if (messageIdToEdit) {
       sentMessage = await editMessageText(chatId, messageIdToEdit, text, env);
    } else {
       sentMessage = await sendMessage(chatId, text, env);
    }
    
    newState.dialog!.messageId = sentMessage.result.message_id;
    await setUserState(chatId, newState, env);
}

async function continueAddGoalDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message!;
    const dialog = state.dialog!;
    const text = message.text;

    let nextStep = dialog.step;
    let nextData = dialog.data || {};
    let responseText = '';

    switch (dialog.step) {
        case 'title':
            nextData.title = text;
            nextStep = 'metric';
            responseText = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.';
            // In a real app, you'd show a keyboard here.
            break;
        // ... other steps like 'metric', 'targetValue', 'deadline' would follow
    }
    
    // For this reconstruction, we'll assume a simplified flow and end the dialog.
    const finalGoal: Omit<Goal, 'id' | 'createdAt' | 'currentValue' | 'status'> = {
        title: nextData.title || "–ù–æ–≤–∞—è —Ü–µ–ª—å",
        metric: GoalMetric.Profit,
        targetValue: 1000,
        deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        scope: { type: 'all' },
    };
    
    const finalState = addGoalToState(state, finalGoal);
    finalState.dialog = null;
    await updateAndSyncState(message.chat.id, finalState, env);

    await sendMessage(message.chat.id, `‚úÖ –¶–µ–ª—å "${finalGoal.title}" —Å–æ–∑–¥–∞–Ω–∞ (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).`, env);
    await showGoalsMenu(update, finalState, env, 0); // Need to implement showGoalsMenu
}

async function showGoalsMenu(update: TelegramUpdate, state: UserState, env: Env, page: number) {
    // This is a placeholder as the actual implementation is in goals.ts, creating a circular dependency
    await sendMessage(update.message!.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ü–µ–ª–µ–π.", env);
}
