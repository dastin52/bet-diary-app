// functions/telegram/dialogs.ts
import { TelegramUpdate, UserState, Env, DialogState, Bet, BetType, BetStatus, GoalMetric } from './types';
import { editMessageText, sendMessage, deleteMessage, reportError } from './telegramApi';
import { makeKeyboard, showMainMenu } from './ui';
import { addBetToState, setUserState, updateAndSyncState, addGoalToState } from './state';
import { BOOKMAKERS, COMMON_ODDS, SPORTS } from '../constants';
import { UseBetsReturn } from '../../src/hooks/useBets'; // Re-using type from frontend

async function callApiProxyForBot(endpoint: string, payload: object, env: Env) {
    const ai = new (require('@google/genai').GoogleGenAI)({ apiKey: env.GEMINI_API_KEY });
    let responseData;
    switch (endpoint) {
        case 'generateContent':
        default:
            const result = await ai.models.generateContent(payload);
            responseData = { text: result.text, sources: result.candidates?.[0]?.groundingMetadata?.groundingChunks };
            break;
    }
    return responseData;
}


export async function continueDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
    const chatId = message.chat.id;

    if (!state.dialog) {
        // Should not happen, but as a safeguard
        await showMainMenu(chatId, null, env);
        return;
    }
    
    // Use a router for different dialog types
    switch (state.dialog.type) {
        case 'add_bet':
            await continueAddBetDialog(update, state, env);
            break;
        case 'add_goal':
            await continueAddGoalDialog(update, state, env);
            break;
        case 'ai_chat':
            await continueAiChatDialog(update, state, env);
            break;
        default:
            // Clean up if dialog type is unknown
            await setUserState(chatId, { ...state, dialog: null }, env);
            await showMainMenu(chatId, state.dialog.messageId, env);
    }
}


// --- ADD BET DIALOG ---

export async function startAddBetDialog(chatId: number, state: UserState, env: Env, messageId: number | null = null) {
    const dialogState: DialogState = {
        type: 'add_bet',
        step: 'ask_sport',
        data: { legs: [] },
    };
    const newState = { ...state, dialog: dialogState };
    
    const text = 'üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:';
    const keyboard = makeKeyboard([
        SPORTS.slice(0, 3).map(s => ({ text: s, callback_data: s })),
        SPORTS.slice(3, 6).map(s => ({ text: s, callback_data: s })),
        SPORTS.slice(6).map(s => ({ text: s, callback_data: s })),
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel'}]
    ]);

    let sentMessage;
    if (messageId) {
        sentMessage = await editMessageText(chatId, messageId, text, env, keyboard);
    } else {
        sentMessage = await sendMessage(chatId, text, env, keyboard);
    }
    
    newState.dialog!.messageId = sentMessage.result.message_id;
    await setUserState(chatId, newState, env);
}

async function continueAddBetDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = (update.message || update.callback_query?.message)!.chat.id;
    const dialog = state.dialog!;
    const messageId = dialog.messageId!;
    const text = update.message?.text;
    const cbData = update.callback_query?.data;

    if (cbData === 'cancel') {
        await deleteMessage(chatId, messageId, env);
        await setUserState(chatId, { ...state, dialog: null }, env);
        await showMainMenu(chatId, null, env, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        return;
    }

    try {
        let nextStep = dialog.step;
        const newData = { ...dialog.data };
        
        switch (dialog.step) {
            case 'ask_sport':
                if (!cbData || !SPORTS.includes(cbData)) return;
                newData.sport = cbData;
                nextStep = 'ask_teams';
                await editMessageText(chatId, messageId, `*${newData.sport}*\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (e.g., \`–ö–æ–º–∞–Ω–¥–∞ 1 - –ö–æ–º–∞–Ω–¥–∞ 2\`)`, env);
                break;

            case 'ask_teams':
                if (!text || !text.includes('-')) {
                    await sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ö–æ–º–∞–Ω–¥–∞ 1 - –ö–æ–º–∞–Ω–¥–∞ 2".', env);
                    return;
                }
                const [home, away] = text.split('-').map(t => t.trim());
                newData.legs.push({ homeTeam: home, awayTeam: away });
                nextStep = 'ask_market';
                await editMessageText(chatId, messageId, `*${home} - ${away}*\n\n–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \`–ü1\`, \`–¢–æ—Ç–∞–ª > 2.5\`)`, env);
                break;
            
            case 'ask_market':
                if (!text) return;
                newData.legs[newData.legs.length - 1].market = text;
                nextStep = 'ask_stake';
                await editMessageText(chatId, messageId, `*–ò—Å—Ö–æ–¥: ${text}*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:`, env);
                break;
            
            case 'ask_stake':
                 if (!text || isNaN(parseFloat(text)) || parseFloat(text) <= 0) {
                    await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.', env);
                    return;
                }
                newData.stake = parseFloat(text);
                nextStep = 'ask_odds';
                 await editMessageText(chatId, messageId, `*–°—É–º–º–∞: ${newData.stake} ‚ÇΩ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:`, env, makeKeyboard([
                    COMMON_ODDS.map(o => ({text: o.toString(), callback_data: o.toString()}))
                ]));
                break;

            case 'ask_odds':
                const oddsVal = parseFloat(cbData || text || '');
                if (isNaN(oddsVal) || oddsVal <= 1) {
                    await sendMessage(chatId, '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 1.', env);
                    return;
                }
                newData.odds = oddsVal;
                nextStep = 'ask_bookmaker';
                await editMessageText(chatId, messageId, `*–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${newData.odds}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–º–µ–∫–µ—Ä–∞:`, env, makeKeyboard([
                    BOOKMAKERS.slice(0,3).map(b => ({text: b, callback_data: b})),
                    BOOKMAKERS.slice(3,6).map(b => ({text: b, callback_data: b})),
                ]));
                break;

            case 'ask_bookmaker':
                if (!cbData) return;
                newData.bookmaker = cbData;
                nextStep = 'confirm';

                const leg = newData.legs[0];
                const summary = `*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:*
- *–°–æ–±—ã—Ç–∏–µ:* ${leg.homeTeam} - ${leg.awayTeam}
- *–ò—Å—Ö–æ–¥:* ${leg.market}
- *–°—É–º–º–∞:* ${newData.stake} ‚ÇΩ
- *–ö–æ—ç—Ñ.:* ${newData.odds}
- *–ë—É–∫–º–µ–∫–µ—Ä:* ${newData.bookmaker}`;
                await editMessageText(chatId, messageId, summary, env, makeKeyboard([
                    [{ text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'confirm' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
                ]));
                break;

            case 'confirm':
                if (cbData !== 'confirm') return;

                const finalBet: Omit<Bet, 'id'|'createdAt'|'event'> = {
                    sport: newData.sport,
                    legs: newData.legs,
                    bookmaker: newData.bookmaker,
                    betType: BetType.Single, // Simple dialog only supports singles for now
                    stake: newData.stake,
                    odds: newData.odds,
                    status: BetStatus.Pending,
                };

                const finalState = addBetToState(state, finalBet);
                finalState.dialog = null;
                await updateAndSyncState(chatId, finalState, env);

                await deleteMessage(chatId, messageId, env);
                await showMainMenu(chatId, null, env, "‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
                return; // End of dialog
        }

        // Update state with new step and data
        await setUserState(chatId, { ...state, dialog: { ...dialog, step: nextStep, data: newData }}, env);
        
    } catch (error) {
        await reportError(chatId, env, 'Add Bet Dialog', error);
        await setUserState(chatId, { ...state, dialog: null }, env);
    }
}

// --- AI CHAT DIALOG ---
export async function startAiChatDialog(chatId: number, state: UserState, env: Env) {
    const dialogState: DialogState = { type: 'ai_chat', step: 'active', data: { history: [] } };
    const sentMessage = await sendMessage(chatId, 'ü§ñ *–ß–∞—Ç —Å AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º*\n\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /exit.', env);
    dialogState.messageId = sentMessage.result.message_id;
    await setUserState(chatId, { ...state, dialog: dialogState }, env);
}

async function continueAiChatDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message;
    if (!message || !message.text) return;
    const chatId = message.chat.id;

    if (message.text === '/exit') {
        await setUserState(chatId, { ...state, dialog: null }, env);
        await sendMessage(chatId, '–ß–∞—Ç —Å AI –∑–∞–≤–µ—Ä—à–µ–Ω.', env);
        await showMainMenu(chatId, null, env);
        return;
    }
    
    await sendMessage(chatId, '_AI –¥—É–º–∞–µ—Ç..._', env);

    const history = state.dialog?.data.history || [];
    const newHistory = [...history, { role: 'user', text: message.text }];

    const analytics = (require('../telegram/analytics')).calculateAnalytics(state);
    
    // Mocking this call since it depends on frontend types and logic
    const generalSystemInstruction = (currentDate: string) => `–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º. –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: ${currentDate}. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –¥–∞—Ç—É –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ç–µ–∫—É—â–∏—Ö –∏–ª–∏ –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;
    const analyticsToText = (a: any) => `–í–æ—Ç —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞–≤–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${a.totalProfit.toFixed(2)}
- ROI: ${a.roi.toFixed(2)}%`;

    const contents = newHistory.map((msg: any) => ({ role: msg.role, parts: [{ text: msg.text }] }));
    if (contents.length === 1 && (contents[0].parts[0].text.toLowerCase().includes('—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å') || contents[0].parts[0].text.toLowerCase().includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'))) {
        contents[0].parts[0].text = `${analyticsToText(analytics)}\n\n${contents[0].parts[0].text}`;
    }

    const response = await callApiProxyForBot('generateContent', {
        model: "gemini-2.5-flash",
        contents: contents,
        config: { systemInstruction: generalSystemInstruction(new Date().toLocaleDateString('ru-RU')) },
        tools: [{googleSearch: {}}],
    }, env);

    await sendMessage(chatId, response.text, env);

    const finalHistory = [...newHistory, { role: 'model', text: response.text }];
    await setUserState(chatId, { ...state, dialog: { ...state.dialog!, data: { history: finalHistory } } }, env);
}


// --- ADD GOAL DIALOG ---

export async function startAddGoalDialog(chatId: number, state: UserState, env: Env, messageId: number) {
    const dialogState: DialogState = { type: 'add_goal', step: 'ask_title', data: {}, messageId };
    await editMessageText(chatId, messageId, 'üìù *–ù–æ–≤–∞—è —Ü–µ–ª—å*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–æ—Å—Ç–∏—á—å +5000‚ÇΩ –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ —Ñ—É—Ç–±–æ–ª–µ"):', env);
    await setUserState(chatId, { ...state, dialog: dialogState }, env);
}

async function continueAddGoalDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = (update.message || update.callback_query?.message)!.chat.id;
    const dialog = state.dialog!;
    const messageId = dialog.messageId!;
    const text = update.message?.text;
    const cbData = update.callback_query?.data;

     if (cbData === 'cancel') {
        await deleteMessage(chatId, messageId, env);
        await setUserState(chatId, { ...state, dialog: null }, env);
        await (require('./goals')).startManageGoals(update, state, env);
        return;
    }

    let nextStep = dialog.step;
    const newData = { ...dialog.data };
    
    switch(dialog.step) {
        case 'ask_title':
            if(!text) return;
            newData.title = text;
            nextStep = 'ask_metric';
            await editMessageText(chatId, messageId, `*${newData.title}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É:`, env, makeKeyboard([
                [{text: '–ü—Ä–∏–±—ã–ª—å (‚ÇΩ)', callback_data: GoalMetric.Profit}, {text: 'ROI (%)', callback_data: GoalMetric.ROI}],
                [{text: '–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ (%)', callback_data: GoalMetric.WinRate}, {text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫', callback_data: GoalMetric.BetCount}],
            ]));
            break;
        
        case 'ask_metric':
            if(!cbData) return;
            newData.metric = cbData;
            nextStep = 'ask_target';
            await editMessageText(chatId, messageId, `*–ú–µ—Ç—Ä–∏–∫–∞: ${cbData}*\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`, env);
            break;

        case 'ask_target':
            if (!text || isNaN(parseFloat(text))) {
                await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.', env);
                return;
            }
            newData.targetValue = parseFloat(text);
            nextStep = 'ask_deadline';
            await editMessageText(chatId, messageId, `*–¶–µ–ª—å: ${newData.targetValue}*\n\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:`, env);
            break;

        case 'ask_deadline':
            if (!text || !/^\d{4}-\d{2}-\d{2}$/.test(text) || isNaN(new Date(text).getTime())) {
                 await sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.', env);
                 return;
            }
            newData.deadline = text;
            nextStep = 'confirm';
            const summary = `*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª—å:*
- *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${newData.title}
- *–ú–µ—Ç—Ä–∏–∫–∞:* ${newData.metric}
- *–¶–µ–ª—å:* ${newData.targetValue}
- *–î–µ–¥–ª–∞–π–Ω:* ${newData.deadline}`;
            await editMessageText(chatId, messageId, summary, env, makeKeyboard([
                [{text: '‚úÖ –°–æ–∑–¥–∞—Ç—å', callback_data: 'confirm'}],
                [{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel'}]
            ]));
            break;

        case 'confirm':
            if (cbData !== 'confirm') return;
            
            const finalState = addGoalToState(state, {
                title: newData.title,
                metric: newData.metric,
                targetValue: newData.targetValue,
                deadline: newData.deadline,
                scope: { type: 'all' },
            });
            finalState.dialog = null;
            await updateAndSyncState(chatId, finalState, env);

            await sendMessage(chatId, "‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", env);
            await (require('./goals')).startManageGoals({ message: { chat: {id: chatId}, from: {id: 0, is_bot: false, first_name:''}, message_id: 0, date: 0 } }, finalState, env);
            await deleteMessage(chatId, messageId, env);
            return;
    }

    await setUserState(chatId, { ...state, dialog: { ...dialog, step: nextStep, data: newData }}, env);
}
