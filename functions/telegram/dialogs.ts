import { Bet, BetStatus, DialogState, Env, TelegramUpdate, BetType } from './types';
import { setUserState, addBetToState } from './state';
import { editMessageText, sendMessage, deleteMessage } from './telegramApi';
import { BOOKMAKERS, SPORTS, COMMON_ODDS, MARKETS_BY_SPORT } from '../constants';
import { showMainMenu } from './ui';
import { findUserBy, addUser, findUserByEmail } from '../data/userStore';
import { calculateRiskManagedStake } from '../utils/betUtils';

// A mock hashing function. In a real app, use a library like bcrypt on the server.
const mockHash = (password: string) => `hashed_${password}`;

const DIALOG_TYPES = {
    ADD_BET: 'add_bet',
    REGISTER: 'register',
    LOGIN: 'login',
    AI_CHAT: 'ai_chat',
};

// --- Helper Functions ---
const getChatId = (update: TelegramUpdate): number => 'message' in update ? update.message.chat.id : update.callbackQuery.message.chat.id;
const getUserInput = (update: TelegramUpdate): string => 'message' in update ? (update.message.text || '') : update.callbackQuery.data;

// --- DIALOG ROUTER ---

export async function continueDialog(update: TelegramUpdate, state: UserState, env: Env) {
    switch (state.dialog?.type) {
        case DIALOG_TYPES.ADD_BET:
            await continueAddBetDialog(update, state, env);
            break;
        case DIALOG_TYPES.REGISTER:
            await continueRegisterDialog(update, state, env);
            break;
        case DIALOG_TYPES.LOGIN:
            await continueLoginDialog(update, state, env);
            break;
        case DIALOG_TYPES.AI_CHAT:
            await continueAiChatDialog(update, state, env);
            break;
    }
}

// --- REGISTER DIALOG ---

export async function startRegisterDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update);
    const dialog: DialogState = { type: 'register', step: 'EMAIL', data: {} };
    const text = "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:";
    
    const message = 'message' in update ? update.message : update.callbackQuery.message;
    await editMessageText(chatId, message.message_id, text, env);
    dialog.messageId = message.message_id;
    
    await setUserState(chatId, { ...state, dialog }, env);
}

async function continueRegisterDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update);
    const userInput = getUserInput(update);
    const dialog = state.dialog!;

    try {
        let text = '';
        switch (dialog.step) {
            case 'EMAIL':
                if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(userInput)) throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                if (await findUserBy(u => u.email.toLowerCase() === userInput.toLowerCase(), env)) throw new Error("–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.");
                dialog.data.email = userInput;
                dialog.step = 'NICKNAME';
                text = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞):";
                break;
            
            case 'NICKNAME':
                if (userInput.length < 3) throw new Error("–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.");
                dialog.data.nickname = userInput;
                dialog.step = 'PASSWORD';
                text = "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):";
                break;
                
            case 'PASSWORD':
                if (userInput.length < 6) throw new Error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.");
                dialog.data.password = userInput;

                const newUser = {
                    email: dialog.data.email,
                    nickname: dialog.data.nickname,
                    password_hash: mockHash(dialog.data.password),
                    registeredAt: new Date().toISOString(),
                    referralCode: `${dialog.data.nickname.toUpperCase().replace(/\s/g, '')}${Date.now().toString().slice(-4)}`,
                    buttercups: 0,
                    status: 'active' as const,
                };
                await addUser(newUser, env);
                
                const newState = { ...state, user: newUser, dialog: null, bets: [], bankroll: 10000, goals: [], bankHistory: [] };
                await setUserState(chatId, newState, env);

                await editMessageText(chatId, dialog.messageId!, `‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${newUser.nickname}!`, env);
                await showMainMenu(getUpdatePayload(update).message, env);
                return;
        }
        await editMessageText(chatId, dialog.messageId!, text, env);
        await setUserState(chatId, { ...state, dialog }, env);
    } catch (error) {
        const errorMessage = `‚ö†Ô∏è ${error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;
        await editMessageText(chatId, dialog.messageId!, errorMessage, env);
    }
}


// --- LOGIN DIALOG ---

export async function startLoginDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update);
    const dialog: DialogState = { type: 'login', step: 'EMAIL', data: {} };
    const text = "üîë *–í—Ö–æ–¥*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:";
    
    const message = getUpdatePayload(update);
    await editMessageText(chatId, message.message_id, text, env);
    dialog.messageId = message.message_id;

    await setUserState(chatId, { ...state, dialog }, env);
}

async function continueLoginDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update);
    const userInput = getUserInput(update);
    const dialog = state.dialog!;

    try {
        let text = '';
        switch (dialog.step) {
            case 'EMAIL':
                const userState = await findUserByEmail(userInput, env);
                if (!userState || !userState.user) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.");
                dialog.data.userState = userState;
                dialog.step = 'PASSWORD';
                text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userState.user.nickname}!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:`;
                break;

            case 'PASSWORD':
                const storedState = dialog.data.userState as UserState;
                if (storedState.user!.password_hash !== mockHash(userInput)) {
                    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                
                const newState = { ...storedState, dialog: null };
                await setUserState(chatId, newState, env);
                
                await editMessageText(chatId, dialog.messageId!, `‚úÖ *–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!*`, env);
                await showMainMenu(getUpdatePayload(update).message, env);
                return;
        }
        await editMessageText(chatId, dialog.messageId!, text, env);
        await setUserState(chatId, { ...state, dialog }, env);
    } catch (error) {
        const errorMessage = `‚ö†Ô∏è ${error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;
        await editMessageText(chatId, dialog.messageId!, errorMessage, env);
    }
}


// --- AI CHAT DIALOG ---
export async function startAiChatDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update);
    const dialog: DialogState = { type: 'ai_chat', step: 'ACTIVE', data: {} };
    const text = "ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.";
    const keyboard = { inline_keyboard: [[{ text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', callback_data: '/stop' }]] };

    const message = getUpdatePayload(update);
    if ('data' in message) { // from callback
        await editMessageText(chatId, message.message_id, text, env, keyboard);
    } else {
        await sendMessage(chatId, text, env, keyboard);
    }
    await setUserState(chatId, { ...state, dialog }, env);
}

async function continueAiChatDialog(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = getChatId(update);
    const userInput = getUserInput(update);
    
    if (userInput.toLowerCase() === '/stop') {
        const newState = { ...state, dialog: null };
        await setUserState(chatId, newState, env);
        const message = getUpdatePayload(update);
        if ('data' in message) {
            await editMessageText(chatId, message.message_id, "–°–µ—Å—Å–∏—è —Å AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", env);
        }
        await showMainMenu(message, env);
        return;
    }
    
    await sendMessage(chatId, "‚è≥ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥—É–º–∞–µ—Ç...", env);
    // Placeholder for actual Gemini API call
    setTimeout(async () => {
        await sendMessage(chatId, `–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: "${userInput}". (–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini API –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).`, env);
    }, 2000);
}


// --- ADD BET DIALOG ---
// Re-implementing the stable, enhanced version of the Add Bet dialog
export * from './addBetDialog';
