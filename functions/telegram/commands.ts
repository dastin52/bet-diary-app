// functions/telegram/commands.ts
import { BetStatus, Env, TelegramCallbackQuery, TelegramMessage, UserState } from './types';
import { getUserState, setUserState, normalizeState } from './state';
import { sendMessage, editMessageText, deleteMessage } from './telegramApi';
import { startAddBetDialog, startLoginDialog, startRegisterDialog, startAiChatDialog } from './dialogs';
import { showMainMenu, showLoginOptions } from './ui';


// --- AUTH & START ---

export async function handleStart(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const state = await getUserState(chatId, env);

    if (state.user) {
        await showMainMenu(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${state.user.nickname}!`, env);
    } else {
        await showLoginOptions(chatId, env);
    }
}

export async function handleRegister(callbackQuery: TelegramCallbackQuery, env: Env) {
    await startRegisterDialog(callbackQuery.message.chat.id, await getUserState(callbackQuery.message.chat.id, env), env, callbackQuery.message.message_id);
}

export async function handleLogin(callbackQuery: TelegramCallbackQuery, env: Env) {
    await startLoginDialog(callbackQuery.message.chat.id, await getUserState(callbackQuery.message.chat.id, env), env, callbackQuery.message.message_id);
}

export async function handleAuth(message: TelegramMessage, code: string, env: Env) {
    const chatId = message.chat.id;
    try {
        const key = `tgauth:${code}`;
        const dataString = await env.BOT_STATE.get(key);

        if (!dataString) {
            await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", env);
            return;
        }

        const userData = JSON.parse(dataString);
        const newState = normalizeState(userData);

        if (!newState.user) throw new Error("User data from KV is invalid.");
        
        await setUserState(chatId, newState, env);
        await env.BOT_STATE.delete(key);
        await deleteMessage(chatId, message.message_id, env);

        await showMainMenu(chatId, `‚úÖ *–£—Å–ø–µ—à–Ω–æ!* –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "${newState.user.nickname}" –ø—Ä–∏–≤—è–∑–∞–Ω.`, env);

    } catch (error) {
        console.error("Auth error:", error);
        await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.", env);
    }
}


// --- CORE FEATURES (LOGIC) ---

async function showStatsLogic(chatId: number, messageId: number, state: UserState, env: Env) {
    const settledBets = state.bets.filter(b => b.status !== BetStatus.Pending);
    if (settledBets.length === 0) {
        await editMessageText(chatId, messageId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", env, { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]]});
        return;
    }
    
    const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
    const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
    const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
    const wonBets = settledBets.filter(b => b.status === BetStatus.Won).length;
    const lostBets = settledBets.filter(b => b.status === BetStatus.Lost).length;
    const nonVoidBets = settledBets.filter(b => b.status !== BetStatus.Void);
    const winRate = nonVoidBets.length > 0 ? (wonBets / nonVoidBets.length) * 100 : 0;

    const statsText = `*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

- *–ë–∞–Ω–∫:* ${state.bankroll.toFixed(2)} ‚ÇΩ
- *–ü—Ä–∏–±—ã–ª—å:* ${totalProfit > 0 ? '+' : ''}${totalProfit.toFixed(2)} ‚ÇΩ
- *–û–±–æ—Ä–æ—Ç:* ${totalStaked.toFixed(2)} ‚ÇΩ
- *ROI:* ${roi.toFixed(2)}%
- *Win Rate:* ${winRate.toFixed(2)}%
- *–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:* ${settledBets.length} (${wonBets}–í / ${lostBets}–ü)`;

    await editMessageText(chatId, messageId, statsText, env, { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]]});
}

async function startAddBetLogic(chatId: number, messageId: number, state: UserState, env: Env) {
    // We delete the menu message and start a new dialog message
    await deleteMessage(chatId, messageId, env).catch(() => {}); // Ignore error if message doesn't exist
    await startAddBetDialog(chatId, state, env);
}

async function showCompetitionsLogic(chatId: number, messageId: number, state: UserState, env: Env) {
    const keyboard = {
        inline_keyboard: [
            [{ text: '–ù–µ–¥–µ–ª—è', callback_data: 'view_leaderboard:week' }, { text: '–ú–µ—Å—è—Ü', callback_data: 'view_leaderboard:month' }],
            [{ text: '–ì–æ–¥', callback_data: 'view_leaderboard:year' }, { text: '–í—Å–µ –≤—Ä–µ–º—è', callback_data: 'view_leaderboard:all_time' }],
            [{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }],
        ]
    };
    const text = "üèÜ *–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:";
    await editMessageText(chatId, messageId, text, env, keyboard);
}

async function showGoalsLogic(chatId: number, messageId: number, state: UserState, env: Env) {
    const text = "üöß –†–∞–∑–¥–µ–ª '–ú–æ–∏ —Ü–µ–ª–∏' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.";
    const keyboard = { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]] };
    await editMessageText(chatId, messageId, text, env, keyboard);
}


// --- COMMAND & CALLBACK HANDLERS (WRAPPERS) ---

export async function handleShowStatsCommand(message: TelegramMessage, state: UserState, env: Env) {
    // For commands, we send a new message and then process it, rather than editing the command message itself
    const sentMessage = await sendMessage(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...", env);
    await showStatsLogic(message.chat.id, sentMessage.result.message_id, state, env);
}
export async function handleShowStatsCallback(callbackQuery: TelegramCallbackQuery, state: UserState, env: Env) {
    await showStatsLogic(callbackQuery.message.chat.id, callbackQuery.message.message_id, state, env);
}

export async function handleStartAddBetCommand(message: TelegramMessage, state: UserState, env: Env) {
    await startAddBetLogic(message.chat.id, message.message_id, state, env);
}
export async function handleStartAddBetCallback(callbackQuery: TelegramCallbackQuery, state: UserState, env: Env) {
    await startAddBetLogic(callbackQuery.message.chat.id, callbackQuery.message.message_id, state, env);
}

export async function handleShowCompetitionsCommand(message: TelegramMessage, state: UserState, env: Env) {
    const sentMessage = await sendMessage(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π...", env);
    await showCompetitionsLogic(message.chat.id, sentMessage.result.message_id, state, env);
}
export async function handleShowCompetitionsCallback(callbackQuery: TelegramCallbackQuery, state: UserState, env: Env) {
    await showCompetitionsLogic(callbackQuery.message.chat.id, callbackQuery.message.message_id, state, env);
}

export async function handleShowGoalsCommand(message: TelegramMessage, state: UserState, env: Env) {
    const sentMessage = await sendMessage(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–ª–µ–π...", env);
    await showGoalsLogic(message.chat.id, sentMessage.result.message_id, state, env);
}
export async function handleShowGoalsCallback(callbackQuery: TelegramCallbackQuery, state: UserState, env: Env) {
    await showGoalsLogic(callbackQuery.message.chat.id, callbackQuery.message.message_id, state, env);
}

export async function handleStartAiChatCommand(message: TelegramMessage, state: UserState, env: Env) {
    await startAiChatDialog(message.chat.id, state, env, message.message_id);
}
export async function handleStartAiChatCallback(callbackQuery: TelegramCallbackQuery, state: UserState, env: Env) {
    await startAiChatDialog(callbackQuery.message.chat.id, state, env, callbackQuery.message.message_id);
}

export async function handleManage(message: TelegramMessage, state: UserState, env: Env) {
    const sentMessage = await sendMessage(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞...", env);
    await editMessageText(message.chat.id, sentMessage.result.message_id, "üöß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –±–æ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", env, {
        inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]]
    });
}

export async function handleGetCode(message: TelegramMessage, state: UserState, env: Env) {
    const sentMessage = await sendMessage(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞...", env);
    await editMessageText(message.chat.id, sentMessage.result.message_id, "‚ÑπÔ∏è –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –±–æ—Ç—É (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ). –î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å.", env, {
        inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]]
    });
}


// This doesn't need a command wrapper as it's only ever a callback
export async function handleViewLeaderboard(callbackQuery: TelegramCallbackQuery, state: UserState, env: Env) {
    const period = callbackQuery.data.split(':')[1] as 'week' | 'month' | 'year' | 'all_time';
    const text = `üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ "${period}" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`;
    const keyboard = { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º', callback_data: 'show_competitions' }]] };
    await editMessageText(callbackQuery.message.chat.id, callbackQuery.message.message_id, text, env, keyboard);
}


// --- COMMON COMMANDS ---

export async function handleHelp(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const helpText = `*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/addbet - üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
/stats - üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/competitions - üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
/goals - üéØ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π
/ai - ü§ñ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º
/reset - ‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
/help - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`;
    await sendMessage(chatId, helpText, env);
}

export async function handleReset(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    await setUserState(chatId, normalizeState(null), env);
    await sendMessage(chatId, "–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", env);
}
