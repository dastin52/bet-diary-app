
// functions/telegram/commands.ts
import { BetStatus, Env, TelegramMessage, UserState, TelegramCallbackQuery } from './types';
import { setUserState, normalizeState } from './state';
import { sendMessage } from './telegramApi';
import { showMainMenu, showLoginOptions } from './ui';

export async function handleStart(message: TelegramMessage, state: UserState, env: Env) {
    if (state.user) {
        await showMainMenu(message, env);
    } else {
        await showLoginOptions(message, env, `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetDiary –ë–æ—Ç!*

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.`);
    }
}

export async function handleHelp(chatId: number, env: Env) {
    const helpText = `*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/reset - ‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
/help - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
    await sendMessage(chatId, helpText, env);
}

export async function handleReset(chatId: number, env: Env) {
    await setUserState(chatId, normalizeState(null), env);
    await sendMessage(chatId, "–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", env);
}

export async function showStats(update: TelegramCallbackQuery, state: UserState, env: Env) {
    const chatId = update.message.chat.id;

    const settledBets = state.bets.filter(b => b.status !== BetStatus.Pending);
    if (settledBets.length === 0) {
        await sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", env);
        return;
    }
    
    const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
    const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
    const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
    const wonBets = settledBets.filter(b => b.status === BetStatus.Won).length;
    const nonVoidBets = settledBets.filter(b => b.status !== BetStatus.Void);
    const winRate = nonVoidBets.length > 0 ? (wonBets / nonVoidBets.length) * 100 : 0;

    const statsText = `*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

- *–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫:* ${state.bankroll.toFixed(2)} ‚ÇΩ
- *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${totalProfit > 0 ? '+' : ''}${totalProfit.toFixed(2)} ‚ÇΩ
- *ROI:* ${roi.toFixed(2)}%
- *–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π:* ${winRate.toFixed(2)}%
- *–í—Å–µ–≥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:* ${settledBets.length}`;

    await sendMessage(chatId, statsText, env);
}

export async function handleAuth(message: TelegramMessage, code: string, env: Env) {
    const chatId = message.chat.id;
    try {
        const key = `tgauth:${code}`;
        const dataString = await env.BOT_STATE.get(key);

        if (!dataString) {
            await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", env);
            return;
        }

        const userData = JSON.parse(dataString);
        const newState = normalizeState(userData);

        if (!newState.user) throw new Error("User data retrieved from storage is invalid.");
        
        await setUserState(chatId, newState, env);
        await env.BOT_STATE.put(`betdata:${newState.user.email}`, JSON.stringify(newState));
        await env.BOT_STATE.delete(key);

        await sendMessage(chatId, `‚úÖ *–£—Å–ø–µ—à–Ω–æ!* –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "${newState.user.nickname}" –ø—Ä–∏–≤—è–∑–∞–Ω.`, env);
        await showMainMenu(message, env);
    } catch (error) {
        await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.", env);
    }
}

// Placeholder functions for features not yet implemented
export async function showCompetitions(update: TelegramCallbackQuery, env: Env) {
    await sendMessage(update.message.chat.id, "üèÜ –†–∞–∑–¥–µ–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", env);
}

export async function showGoals(update: TelegramCallbackQuery, state: UserState, env: Env) {
     await sendMessage(update.message.chat.id, "üéØ –†–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", env);
}
