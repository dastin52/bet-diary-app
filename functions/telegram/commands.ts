// functions/telegram/commands.ts
// FIX: Import Dialog type to explicitly type the new dialog object.
import { BetStatus, Env, TelegramCallbackQuery, TelegramMessage, UserState, Dialog } from './types';
import { getUserState, setUserState, normalizeState } from './state';
// FIX: Import sendMessage to handle commands sent via direct message.
import { sendMessage, editMessageText, deleteMessage } from './telegramApi';
import { startAddBetDialog, startLoginDialog, startRegisterDialog } from './dialogs';
import { GoogleGenAI } from '@google/genai';
import { getPeriodStart } from '../../utils/dateHelpers';

// --- AUTH & START ---

export async function handleStart(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const state = await getUserState(chatId, env);

    if (state.user) {
        await showMainMenu(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${state.user.nickname}!`, env, message.message_id);
    } else {
        await showLoginOptions(chatId, env);
    }
}

export async function handleRegister(callbackQuery: TelegramCallbackQuery, env: Env) {
    await startRegisterDialog(callbackQuery.message.chat.id, await getUserState(callbackQuery.message.chat.id, env), env, callbackQuery.message.message_id);
}

export async function handleLogin(callbackQuery: TelegramCallbackQuery, env: Env) {
    await startLoginDialog(callbackQuery.message.chat.id, await getUserState(callbackQuery.message.chat.id, env), env, callbackQuery.message.message_id);
}


export async function handleAuth(message: TelegramMessage, code: string, env: Env) {
    const chatId = message.chat.id;
    try {
        const key = `tgauth:${code}`;
        const dataString = await env.BOT_STATE.get(key);

        if (!dataString) {
            await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", env);
            return;
        }

        const userData = JSON.parse(dataString);
        const newState = normalizeState(userData);

        if (!newState.user) throw new Error("User data from KV is invalid.");
        
        await setUserState(chatId, newState, env);
        await env.BOT_STATE.delete(key);
        await deleteMessage(chatId, message.message_id, env);

        await showMainMenu(chatId, `‚úÖ *–£—Å–ø–µ—à–Ω–æ!* –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "${newState.user.nickname}" –ø—Ä–∏–≤—è–∑–∞–Ω.`, env);

    } catch (error) {
        await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.", env);
    }
}


// --- MAIN MENU & CORE FEATURES ---

export async function handleShowStats(query: TelegramCallbackQuery | TelegramMessage, state: UserState, env: Env) {
    const chatId = "message" in query ? query.message.chat.id : query.chat.id;
    const messageId = "message" in query ? query.message.message_id : query.message_id;

    const settledBets = state.bets.filter(b => b.status !== BetStatus.Pending);
    if (settledBets.length === 0) {
        await editMessageText(chatId, messageId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", env, { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]]});
        return;
    }
    
    const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
    const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
    const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
    const wonBets = settledBets.filter(b => b.status === BetStatus.Won).length;
    const lostBets = settledBets.filter(b => b.status === BetStatus.Lost).length;
    const nonVoidBets = settledBets.filter(b => b.status !== BetStatus.Void);
    const winRate = nonVoidBets.length > 0 ? (wonBets / nonVoidBets.length) * 100 : 0;

    const statsText = `*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

- *–ë–∞–Ω–∫:* ${state.bankroll.toFixed(2)} ‚ÇΩ
- *–ü—Ä–∏–±—ã–ª—å:* ${totalProfit > 0 ? '+' : ''}${totalProfit.toFixed(2)} ‚ÇΩ
- *–û–±–æ—Ä–æ—Ç:* ${totalStaked.toFixed(2)} ‚ÇΩ
- *ROI:* ${roi.toFixed(2)}%
- *Win Rate:* ${winRate.toFixed(2)}%
- *–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:* ${settledBets.length} (${wonBets}–í / ${lostBets}–ü)
`;

    await editMessageText(chatId, messageId, statsText, env, { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]]});
}

export async function handleStartAddBet(query: TelegramCallbackQuery | TelegramMessage, state: UserState, env: Env) {
    const chatId = "message" in query ? query.message.chat.id : query.chat.id;
    const messageId = "message" in query ? query.message.message_id : query.message_id;
    await deleteMessage(chatId, messageId, env);
    await startAddBetDialog(chatId, state, env);
}

// --- COMPETITIONS ---

// FIX: Modified handler to accept both message and callback query to resolve type errors.
export async function handleShowCompetitions(query: TelegramCallbackQuery | TelegramMessage, state: UserState, env: Env) {
    const chatId = "message" in query ? query.message.chat.id : query.chat.id;
    const messageId = "message" in query ? query.message.message_id : query.message_id;
    const keyboard = {
        inline_keyboard: [
            [{ text: '–ù–µ–¥–µ–ª—è', callback_data: 'view_leaderboard:week' }, { text: '–ú–µ—Å—è—Ü', callback_data: 'view_leaderboard:month' }],
            [{ text: '–ì–æ–¥', callback_data: 'view_leaderboard:year' }, { text: '–í—Å–µ –≤—Ä–µ–º—è', callback_data: 'view_leaderboard:all_time' }],
            [{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }],
        ]
    };
    const text = "üèÜ *–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:";
    if ("message" in query) { // It's a callback query
        await editMessageText(chatId, messageId, text, env, keyboard);
    } else { // It's a message
        await sendMessage(chatId, text, env, keyboard);
    }
}

export async function handleViewLeaderboard(callbackQuery: TelegramCallbackQuery, state: UserState, env: Env) {
    const period = callbackQuery.data.split(':')[1] as 'week' | 'month' | 'year' | 'all_time';
    const periodStartDate = period === 'all_time' ? null : getPeriodStart(period);

    const userList = await env.BOT_STATE.get<string[]>('users_list', 'json') || [];
    let allUsersData = [];

    for (const email of userList) {
        const userState = await env.BOT_STATE.get<UserState>(`user:${email}`, 'json');
        if (userState && userState.user) {
            allUsersData.push(userState);
        }
    }

    const participantData = allUsersData.map(userState => {
        const periodBets = periodStartDate ? userState.bets.filter(b => new Date(b.createdAt) >= periodStartDate) : userState.bets;
        const settledBets = periodBets.filter(b => b.status !== BetStatus.Pending && b.status !== BetStatus.Void);
        const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
        const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
        const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
        return { user: userState.user, totalBets: settledBets.length, roi, totalProfit };
    }).filter(p => p.totalBets > 0);

    const topRoi = [...participantData].sort((a, b) => b.roi - a.roi).slice(0, 5);

    let leaderboardText = `üëë *–¢–æ–ø-5 –ø–æ ROI –∑–∞ ${period}*\n\n`;
    if (topRoi.length > 0) {
        leaderboardText += topRoi.map((p, i) => `${i + 1}. ${p.user.nickname} - *${p.roi.toFixed(2)}%* (${p.totalBets} —Å—Ç–∞–≤–æ–∫)`).join('\n');
    } else {
        leaderboardText += "_–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è._";
    }

    const keyboard = { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º', callback_data: 'show_competitions' }]] };
    await editMessageText(callbackQuery.message.chat.id, callbackQuery.message.message_id, leaderboardText, env, keyboard);
}


// --- GOALS & AI ---

// FIX: Modified handler to accept both message and callback query to resolve type errors.
export async function handleShowGoals(query: TelegramCallbackQuery | TelegramMessage, state: UserState, env: Env) {
    const chatId = "message" in query ? query.message.chat.id : query.chat.id;
    const messageId = "message" in query ? query.message.message_id : query.message_id;
    const text = "üöß –†–∞–∑–¥–µ–ª '–ú–æ–∏ —Ü–µ–ª–∏' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.";
    const keyboard = { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: 'main_menu' }]] };

    if ("message" in query) { // CallbackQuery
        await editMessageText(chatId, messageId, text, env, keyboard);
    } else { // Message
        await sendMessage(chatId, text, env, keyboard);
    }
}

// FIX: Modified handler to accept both message and callback query, and fixed dialog creation type error.
export async function handleStartAiChat(query: TelegramCallbackQuery | TelegramMessage, state: UserState, env: Env) {
    const chatId = "message" in query ? query.message.chat.id : query.chat.id;
    const messageId = "message" in query ? query.message.message_id : query.message_id;
    
    // Clear previous chat history if any
    if (state.dialog?.type === 'ai_chat') {
        state.dialog.data.history = [];
    }
    
    // FIX: Explicitly type the dialog object to prevent type inference issues.
    const newDialog: Dialog = { type: 'ai_chat', step: 'active', data: { history: [] } };
    const newState: UserState = { ...state, dialog: newDialog };
    await setUserState(chatId, newState, env);

    const keyboard = { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data: 'exit_ai_chat' }]] };
    const text = "ü§ñ –í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.";

    if ("message" in query) { // CallbackQuery
        await editMessageText(chatId, messageId, text, env, keyboard);
    } else { // Message
        await sendMessage(chatId, text, env, keyboard);
    }
}

// --- HELPERS ---

export async function showMainMenu(chatId: number, text: string, env: Env, messageId?: number) {
    const keyboard = {
        inline_keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' }, { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É', callback_data: 'add_bet' }],
            [{ text: 'üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', callback_data: 'show_competitions' }, { text: 'üéØ –ú–æ–∏ —Ü–µ–ª–∏', callback_data: 'show_goals' }],
            [{ text: 'ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫', callback_data: 'ai_chat' }],
        ]
    };
    if (messageId) {
        await editMessageText(chatId, messageId, text, env, keyboard);
    } else {
        await sendMessage(chatId, text, env, keyboard);
    }
}

export async function showLoginOptions(chatId: number, env: Env) {
    const text = `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetDiary –ë–æ—Ç!*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.`;
    const keyboard = {
        inline_keyboard: [
            [{ text: '‚û°Ô∏è –í–æ–π—Ç–∏', callback_data: 'login' }, { text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' }],
            [{ text: 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (–ø–æ –∫–æ–¥—É —Å —Å–∞–π—Ç–∞)', callback_data: 'link_account' }],
        ]
    };
    await sendMessage(chatId, text, env, keyboard);
}
