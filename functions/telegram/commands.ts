// functions/telegram/commands.ts
import { TelegramUpdate, UserState, Env, TelegramMessage } from './types';
import { sendMessage, sendDocument } from './telegramApi';
import { showMainMenu, showStatsMenu } from './ui';
import { setUserState, updateAndSyncState } from './state';
import { startManageBets } from './manageBets';
import { showCompetitionsMenu } from './competition';
import { startManageGoals } from './goals';
import { calculateAnalytics, formatShortReportText, formatDetailedReportText, generateAnalyticsHtml } from './analytics';
import { startAddBetDialog, startAiChatDialog } from './dialogs';
import { CB } from './router';

export async function handleStart(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = update.message!.chat.id;
    if (state.user) {
        await showMainMenu(chatId, null, env, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${state.user.nickname}!`);
    } else {
        await sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetDiary Bot! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' -> '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram'.\n3. –ù–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥'.\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –º–Ω–µ –≤ —á–∞—Ç.", env);
    }
}

export async function handleHelp(message: TelegramMessage, env: Env) {
    const text = `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/addbet - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/manage - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏
/competitions - –¢–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
/goals - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏
/ai - –ß–∞—Ç —Å AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º
/reset - –°–±—Ä–æ—Å –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
    await sendMessage(message.chat.id, text, env);
}

export async function handleReset(message: TelegramMessage, env: Env) {
    await setUserState(message.chat.id, { user: null, bets: [], bankroll: 10000, goals: [], bankHistory: [], dialog: null }, env);
    await sendMessage(message.chat.id, "–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", env);
}

export async function handleAuth(message: TelegramMessage, code: string, env: Env) {
    const chatId = message.chat.id;
    const key = `tgauth:${code}`;
    const userDataStr = await env.BOT_STATE.get(key);

    if (userDataStr) {
        const userData = JSON.parse(userDataStr);
        const state: UserState = { ...userData, dialog: null };
        // Sync with the master record for this user's email
        await updateAndSyncState(chatId, state, env);
        await env.BOT_STATE.delete(key);
        await showMainMenu(chatId, null, env, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${state.user.nickname}.`);
    } else {
        await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", env);
    }
}

export async function handleAddBet(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
    
    // In a real implementation, this would trigger a multi-step dialog.
    // await startAddBetDialog(message.chat.id, state, env, message.message_id);
    await sendMessage(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.", env);
}

export async function handleStats(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;

    const analytics = calculateAnalytics(state);
    const messageId = update.callback_query ? message.message_id : null;

    // Check if it's a callback for a specific report type
    if (update.callback_query?.data === CB.SHOW_DETAILED_ANALYTICS) {
         await sendMessage(message.chat.id, formatDetailedReportText(analytics), env);
         return;
    }
    if (update.callback_query?.data === CB.DOWNLOAD_ANALYTICS_REPORT) {
        const html = generateAnalyticsHtml(analytics);
        const file = new Blob([html], { type: 'text/html' });
        await sendDocument(message.chat.id, file, 'BetDiary_Report.html', env);
        return;
    }

    // Default action: show stats menu
    const text = formatShortReportText(analytics);
    await showStatsMenu(message.chat.id, messageId, text, env);
}

export async function handleManageBets(update: TelegramUpdate, state: UserState, env: Env) {
    await startManageBets(update, state, env);
}

export async function handleCompetitions(update: TelegramUpdate, state: UserState, env: Env) {
    await showCompetitionsMenu(update, state, env);
}

export async function handleGoals(update: TelegramUpdate, state: UserState, env: Env) {
    await startManageGoals(update, state, env);
}

export async function handleAiChat(update: TelegramUpdate, state: UserState, env: Env) {
    const messageId = update.callback_query ? update.callback_query.message.message_id : null;
    const chatId = messageId ? update.callback_query!.message.chat.id : update.message!.chat.id;
    await startAiChatDialog(chatId, state, env, messageId);
}
