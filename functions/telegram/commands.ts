// functions/telegram/commands.ts
import { BetStatus, Env, TelegramUpdate, UserState } from './types';
import { getUserState, setUserState, normalizeState } from './state';
import { reportError } from './telegramApi';
import { startAddBetDialog, startLoginDialog, startRegisterDialog } from './dialogs';
import { showLoginOptions, showMainMenu } from './ui';
import { findUserBy, addUser, findUserByEmail } from '../data/userStore';
import { calculateAnalytics, generateShortStatsReport } from './analytics';

// A mock hashing function. In a real app, use a library like bcrypt on the server.
const mockHash = (password: string) => `hashed_${password}`;

// FIX: Helper to get the actual payload (Message or CallbackQuery) from the update wrapper.
const getUpdatePayload = (update: TelegramUpdate) => 'message' in update ? update.message : update.callbackQuery;
const getChatId = (update: TelegramUpdate): number => 'message' in update ? update.message.chat.id : update.callbackQuery.message.chat.id;

// --- Global Commands (can interrupt dialogs) ---
export async function handleStart(update: TelegramUpdate, state: UserState, env: Env) {
    if (state.dialog) {
        // If in a dialog, reset it before showing the main menu
        state.dialog = null;
        // FIX: Use chatId for setUserState, not email.
        await setUserState(getChatId(update), state, env);
    }
    
    if (state.user) {
        // FIX: Pass the unwrapped payload and the text argument.
        await showMainMenu(getUpdatePayload(update), env, `üëã –ü—Ä–∏–≤–µ—Ç, ${state.user.nickname}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`);
    } else {
        // FIX: Pass the unwrapped payload.
        await showLoginOptions(getUpdatePayload(update), env, `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetDiary –ë–æ—Ç!*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`);
    }
}

export async function handleReset(update: TelegramUpdate, state: UserState, env: Env) {
    const chatId = 'message' in update ? update.message.chat.id : update.callbackQuery.message.chat.id;
    const freshState = normalizeState({ user: state.user }); // Keep user, reset everything else
    await setUserState(chatId, freshState, env);
    // FIX: Pass unwrapped payload.
    await showMainMenu(getUpdatePayload(update), env, "–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
}


// --- Regular Commands ---
export async function handleAddBet(update: TelegramUpdate, state: UserState, env: Env) {
    // FIX: Pass unwrapped payload.
    if (!state.user) return await showLoginOptions(getUpdatePayload(update), env, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
    await startAddBetDialog(update, state, env);
}

export async function handleManageBets(update: TelegramUpdate, state: UserState, env: Env) {
     // FIX: Pass unwrapped payload.
     if (!state.user) return await showLoginOptions(getUpdatePayload(update), env, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
    // FIX: Dynamically import the module and call the correct exported function.
    const manageBets = await import('./manageBets');
    await manageBets.startManageBets(update, state, env);
}

export async function handleStats(update: TelegramUpdate, state: UserState, env: Env) {
    // FIX: Pass unwrapped payload.
    if (!state.user) return await showLoginOptions(getUpdatePayload(update), env, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
    const report = generateShortStatsReport(state);
    // FIX: Pass the unwrapped payload and the text argument.
    await showMainMenu(getUpdatePayload(update), env, report); // Show stats and then the main menu below it
}

export async function handleCompetitions(update: TelegramUpdate, state: UserState, env: Env) {
    // FIX: Pass unwrapped payload.
    if (!state.user) return await showLoginOptions(getUpdatePayload(update), env, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
    // FIX: Pass the unwrapped payload and the text argument.
    await showMainMenu(getUpdatePayload(update), env, "üèÜ –†–∞–∑–¥–µ–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
}

export async function handleGoals(update: TelegramUpdate, state: UserState, env: Env) {
    // FIX: Pass unwrapped payload.
    if (!state.user) return await showLoginOptions(getUpdatePayload(update), env, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
    // FIX: Pass the unwrapped payload and the text argument.
    await showMainMenu(getUpdatePayload(update), env, "üéØ –†–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.");
}

export async function handleAiAnalyst(update: TelegramUpdate, state: UserState, env: Env) {
     // FIX: Pass unwrapped payload.
     if (!state.user) return await showLoginOptions(getUpdatePayload(update), env, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
    const { startAiChatDialog } = await import('./dialogs');
    await startAiChatDialog(update, state, env);
}

export async function handleRegister(update: TelegramUpdate, state: UserState, env: Env) {
    await startRegisterDialog(update, state, env);
}

export async function handleLogin(update: TelegramUpdate, state: UserState, env: Env) {
    await startLoginDialog(update, state, env);
}

export async function handleHelp(update: TelegramUpdate, state: UserState, env: Env) {
    const helpText = `*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start –∏–ª–∏ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/addbet - üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
/stats - üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/manage - üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏
/reset - ‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
/help - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;

    // FIX: Pass unwrapped payload.
    await showMainMenu(getUpdatePayload(update), env, helpText);
}

export async function handleAuth(update: TelegramUpdate, state: UserState, env: Env, code: string) {
    const chatId = 'message' in update ? update.message.chat.id : update.callbackQuery.message.chat.id;
    try {
        const key = `tgauth:${code}`;
        const dataString = await env.BOT_STATE.get(key);

        if (!dataString) {
            // FIX: Pass unwrapped payload.
            await showLoginOptions(getUpdatePayload(update), env, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.");
            return;
        }

        const userData = JSON.parse(dataString);
        const newState = normalizeState(userData);

        if (!newState.user) throw new Error("User data from KV is invalid.");
        
        await setUserState(chatId, newState, env);
        await env.BOT_STATE.delete(key);
        
        // Also save the full user data under the permanent key
        await env.BOT_STATE.put(`betdata:${newState.user.email}`, JSON.stringify(newState));

        await handleStart(update, newState, env);

    } catch (error) {
        await reportError(chatId, env, 'Auth Handler', error);
    }
}