// functions/telegram/commands.ts
import { BetStatus, Env, TelegramMessage, UserState } from './types';
import { getUserState, setUserState, normalizeState } from './state';
import { sendMessage } from './telegramApi';
import { startAddBetDialog } from './dialogs';
import { showLoginOptions, showMainMenu } from './ui';

export async function handleStart(message: TelegramMessage, state: UserState, env: Env) {
    if (state.user) {
        await showMainMenu(message, env);
    } else {
        await sendMessage(message.chat.id, `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetDiary –ë–æ—Ç!*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

1.  –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ BetDiary.
2.  –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏".
3.  –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥" –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram.
4.  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –º–Ω–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.

–ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ/–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å.`, env);
        await showLoginOptions(message, env);
    }
}

export async function handleHelp(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const helpText = `*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/addbet - üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
/stats - üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/reset - ‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.`;
    await sendMessage(chatId, helpText, env);
}

export async function handleReset(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const state = await getUserState(chatId, env);
    state.dialog = null; // Only reset the dialog, not the full user state
    await setUserState(chatId, state, env);
    await sendMessage(chatId, "–í–∞—à —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.", env);
    await showMainMenu(message, env);
}

export async function handleAddBet(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const state = await getUserState(chatId, env);

    if (!state.user) {
        await showLoginOptions(message, env, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.");
        return;
    }

    if (state.dialog) {
        await sendMessage(chatId, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è –æ—Ç–º–µ–Ω—ã.", env);
        return;
    }
    
    await startAddBetDialog(chatId, state, env);
}

export async function handleStats(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const state = await getUserState(chatId, env);

    if (!state.user) {
        await showLoginOptions(message, env, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.");
        return;
    }

    const settledBets = state.bets.filter(b => b.status !== BetStatus.Pending);
    if (settledBets.length === 0) {
        await sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", env);
        return;
    }
    
    const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
    const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
    const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
    const wonBets = settledBets.filter(b => b.status === BetStatus.Won).length;
    const nonVoidBets = settledBets.filter(b => b.status !== BetStatus.Void);
    const winRate = nonVoidBets.length > 0 ? (wonBets / nonVoidBets.length) * 100 : 0;

    const statsText = `*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

- *–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫:* ${state.bankroll.toFixed(2)} ‚ÇΩ
- *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${totalProfit > 0 ? '+' : ''}${totalProfit.toFixed(2)} ‚ÇΩ
- *ROI:* ${roi.toFixed(2)}%
- *–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π:* ${winRate.toFixed(2)}%
- *–í—Å–µ–≥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:* ${settledBets.length}`;

    await sendMessage(chatId, statsText, env);
}

export async function handleAuth(message: TelegramMessage, code: string, env: Env) {
    const chatId = message.chat.id;
    
    try {
        const key = `tgauth:${code}`;
        const dataString = await env.BOT_STATE.get(key);

        if (!dataString) {
            await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", env);
            return;
        }

        const userData = JSON.parse(dataString);
        
        const newState = normalizeState(userData);

        if (!newState.user) {
            throw new Error("User data retrieved from storage is invalid.");
        }
        
        await setUserState(chatId, newState, env);
        
        // Clean up the used auth code
        await env.BOT_STATE.delete(key);

        await sendMessage(chatId, `‚úÖ *–£—Å–ø–µ—à–Ω–æ!* –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "${newState.user.nickname}" –ø—Ä–∏–≤—è–∑–∞–Ω.`, env);
        await showMainMenu(message, env);

    } catch (error) {
        console.error("Auth error:", error);
        await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.", env);
    }
}
