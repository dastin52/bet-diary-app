// functions/telegram/commands.ts
import { Env, TelegramMessage, UserState } from './types';
import { getUserState, setUserState, normalizeState } from './state';
import { sendMessage } from './telegramApi';
import { startAddBetDialog } from './dialogs';
import { generateStatsReport } from './analytics';
import { showMainMenu, showLoginOptions } from './ui';
import { CB } from './router';

export async function handleStart(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const state = await getUserState(chatId, env);

    if (state.user) {
        await showMainMenu(message, env);
    } else {
        await showLoginOptions(message, env, `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetDiary –ë–æ—Ç!*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.`);
    }
}

export async function handleHelp(chatId: number, env: Env) {
    const helpText = `*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/addbet - üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
/stats - üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/manage - üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏
/ai - ü§ñ –ß–∞—Ç —Å AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º
/reset - ‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é
/help - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
    await sendMessage(chatId, helpText, env);
}

export async function handleReset(chatId: number, env: Env) {
    await setUserState(chatId, normalizeState(null), env);
    await sendMessage(chatId, "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", env);
}

export async function handleAuth(message: TelegramMessage, code: string, env: Env) {
    const chatId = message.chat.id;
    try {
        const key = `tgauth:${code}`;
        const dataString = await env.BOT_STATE.get(key);

        if (!dataString) {
            await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", env);
            return;
        }
        
        await env.BOT_STATE.delete(key);
        const userData = JSON.parse(dataString);
        const newState = normalizeState(userData);

        if (!newState.user) throw new Error("User data from auth code is invalid.");
        
        await setUserState(chatId, newState, env);
        
        await sendMessage(chatId, `‚úÖ *–£—Å–ø–µ—à–Ω–æ!* –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "${newState.user.nickname}" –ø—Ä–∏–≤—è–∑–∞–Ω.`, env);
        await showMainMenu(message, env);
    } catch (error) {
        console.error("Auth error:", error);
        await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.", env);
    }
}

export async function handleAddBet(chatId: number, state: UserState, env: Env) {
    if (state.dialog) {
        await sendMessage(chatId, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è –æ—Ç–º–µ–Ω—ã.", env);
        return;
    }
    await startAddBetDialog(chatId, state, env);
}

export async function handleStats(chatId: number, state: UserState, env: Env) {
    const statsText = generateStatsReport(state);
    await sendMessage(chatId, statsText, env, {
        inline_keyboard: [[{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: CB.BACK_TO_MAIN }]]
    });
}
