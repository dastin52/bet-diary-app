// functions/telegram/commands.ts
import { BetStatus, Env, TelegramMessage, TelegramUpdate, UserState } from './types';
import { getUserState, setUserState, normalizeState } from './state';
import { reportError, sendMessage, sendDocument } from './telegramApi';
// FIX: Import startAiChatDialog to be used in handleAiChat.
import { startAddBetDialog, startAiChatDialog } from './dialogs';
import { showMainMenu, showStatsMenu } from './ui';
import { calculateAnalytics, formatDetailedReportText, formatShortReportText, generateAnalyticsHtml } from './analytics';
import { startManageBets } from './manageBets';
import { showCompetitionsMenu } from './competition';
import { startManageGoals } from './goals';


export async function handleStart(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
    const chatId = message.chat.id;

    if (state.user) {
        await showMainMenu(chatId, null, env, `üëã –ü—Ä–∏–≤–µ—Ç, ${state.user.nickname}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`);
    } else {
        await sendMessage(chatId, `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetDiary –ë–æ—Ç!*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

1.  –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ BetDiary.
2.  –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏".
3.  –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥" –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram.
4.  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –º–Ω–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.`, env);
    }
}

export async function handleHelp(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    const helpText = `*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/addbet - üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
/stats - üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/manage - üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏
/competitions - üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
/goals - üéØ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π
/ai - ü§ñ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º
/reset - ‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
/help - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`;
    await sendMessage(chatId, helpText, env);
}

export async function handleReset(message: TelegramMessage, env: Env) {
    const chatId = message.chat.id;
    await setUserState(chatId, normalizeState(null), env);
    await sendMessage(chatId, "–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", env);
}

export async function handleAddBet(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
    const chatId = message.chat.id;

    if (!state.user) {
        await sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", env);
        return;
    }
    
    await startAddBetDialog(chatId, state, env);
}

export async function handleStats(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
    const chatId = message.chat.id;

    if (!state.user) {
        await sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", env);
        return;
    }
    
    if (state.bets.filter(b => b.status !== BetStatus.Pending).length === 0) {
        await sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", env);
        return;
    }

    const analytics = calculateAnalytics(state);
    if (!analytics) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.");
    }
    const shortReport = formatShortReportText(analytics);
    
    const messageId = update.callback_query ? message.message_id : null;
    await showStatsMenu(chatId, messageId, shortReport, env);
}

export async function handleShowDetailedReport(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.callback_query?.message;
    if (!message) return;

    const analytics = calculateAnalytics(state);
    const detailedReport = formatDetailedReportText(analytics);
    
    await sendMessage(message.chat.id, detailedReport, env);
}

export async function handleDownloadReport(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.callback_query?.message;
    if (!message) return;
    const chatId = message.chat.id;

    await sendMessage(chatId, "‚è≥ –ì–æ—Ç–æ–≤–ª—é –≤–∞—à –æ—Ç—á–µ—Ç...", env);

    const analytics = calculateAnalytics(state);
    const htmlReport = generateAnalyticsHtml(analytics);
    
    const blob = new Blob([htmlReport], { type: 'text/html' });
    const fileName = `BetDiary_–û—Ç—á–µ—Ç_${new Date().toISOString().split('T')[0]}.html`;

    await sendDocument(chatId, blob, fileName, env);
}

export async function handleManageBets(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
     if (!state.user) {
        await sendMessage(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", env);
        return;
    }
    await startManageBets(update, state, env);
}

export async function handleCompetitions(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
     if (!state.user) {
        await sendMessage(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", env);
        return;
    }
    await showCompetitionsMenu(update, state, env);
}

export async function handleGoals(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
     if (!state.user) {
        await sendMessage(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", env);
        return;
    }
    await startManageGoals(update, state, env);
}

// FIX: Add handler for AI chat command.
export async function handleAiChat(update: TelegramUpdate, state: UserState, env: Env) {
    const message = update.message || update.callback_query?.message;
    if (!message) return;
    const chatId = message.chat.id;

    if (!state.user) {
        await sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.", env);
        return;
    }
    
    await startAiChatDialog(chatId, state, env);
}

export async function handleAuth(message: TelegramMessage, code: string, env: Env) {
    const chatId = message.chat.id;
    
    try {
        const key = `tgauth:${code}`;
        const dataString = await env.BOT_STATE.get(key);

        if (!dataString) {
            await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", env);
            return;
        }

        const userData = JSON.parse(dataString);
        const newState = normalizeState(userData);

        if (!newState.user) {
            throw new Error("User data retrieved from KV is invalid.");
        }
        
        await env.BOT_STATE.put(`betdata:${newState.user.email}`, JSON.stringify(newState));
        await setUserState(chatId, newState, env);
        await env.BOT_STATE.delete(key);

        await sendMessage(chatId, `‚úÖ *–£—Å–ø–µ—à–Ω–æ!* –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "${newState.user.nickname}" –ø—Ä–∏–≤—è–∑–∞–Ω.`, env);
        await showMainMenu(chatId, null, env);

    } catch (error) {
        await reportError(chatId, env, 'Auth Handler', error);
    }
}
