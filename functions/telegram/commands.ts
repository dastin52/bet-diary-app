// functions/telegram/commands.ts
import { BetStatus, Env, TelegramMessage, UserState, TelegramCallbackQuery } from './types';
import { setUserState, normalizeState } from './state';
import { sendMessage, editMessageText, deleteMessage, reportError } from './telegramApi';
import { startAddBetDialog, startAiChatDialog, startLoginDialog, startRegisterDialog } from './dialogs';
import { showMainMenu, showLoginOptions, makeKeyboard } from './ui';
import { CB } from './router';
import * as userStore from '../data/userStore';

const isCallback = (update: TelegramMessage | TelegramCallbackQuery): update is TelegramCallbackQuery => 'data' in update;

function getStatsText(state: UserState): string {
    const settledBets = state.bets.filter(b => b.status !== BetStatus.Pending);
    if (settledBets.length === 0) {
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.";
    }
    const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
    const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
    const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
    const wonBets = settledBets.filter(b => b.status === BetStatus.Won).length;
    const nonVoidBets = settledBets.filter(b => b.status !== BetStatus.Void);
    const winRate = nonVoidBets.length > 0 ? (wonBets / nonVoidBets.length) * 100 : 0;

    return `*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

- *–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫:* ${state.bankroll.toFixed(2)} ‚ÇΩ
- *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${totalProfit > 0 ? '+' : ''}${totalProfit.toFixed(2)} ‚ÇΩ
- *ROI:* ${roi.toFixed(2)}%
- *–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π:* ${winRate.toFixed(2)}%
- *–í—Å–µ–≥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:* ${settledBets.length}`;
}

export async function handleStart(update: TelegramMessage | TelegramCallbackQuery, state: UserState, env: Env) {
    if (state.user) {
        await showMainMenu(update, env);
    } else {
        await showLoginOptions(update, env, `üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BetDiary –ë–æ—Ç!*\n\n–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.`);
    }
}

export async function handleAddBet(update: TelegramMessage | TelegramCallbackQuery, state: UserState, env: Env) {
    const chatId = isCallback(update) ? update.message.chat.id : update.chat.id;
    if (isCallback(update)) {
        await deleteMessage(chatId, update.message.message_id, env).catch(e => console.error("Failed to delete message:", e));
    }
    await startAddBetDialog(chatId, state, env);
}

export async function handleStats(update: TelegramMessage | TelegramCallbackQuery, state: UserState, env: Env) {
    const statsText = getStatsText(state);
    const keyboard = makeKeyboard([[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: CB.SHOW_MAIN_MENU }]]);
    if (isCallback(update)) {
        await editMessageText(update.message.chat.id, update.message.message_id, statsText, env, keyboard);
    } else {
        await sendMessage(update.chat.id, statsText, env, keyboard);
    }
}

export async function handleHelp(update: TelegramMessage | TelegramCallbackQuery, state: UserState, env: Env) {
    const chatId = isCallback(update) ? update.message.chat.id : update.chat.id;
    const helpText = `*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/addbet - üìù –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É\n/stats - üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n/reset - ‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n/help - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
    await sendMessage(chatId, helpText, env);
}

export async function handleReset(update: TelegramMessage | TelegramCallbackQuery, state: UserState, env: Env) {
    const chatId = isCallback(update) ? update.message.chat.id : update.chat.id;
    await setUserState(chatId, normalizeState(null), env);
    await sendMessage(chatId, "–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", env);
}

export async function handleRegister(update: TelegramCallbackQuery, state: UserState, env: Env) {
    await startRegisterDialog(update.message.chat.id, state, env, update.message.message_id);
}

export async function handleLogin(update: TelegramCallbackQuery, state: UserState, env: Env) {
    await startLoginDialog(update.message.chat.id, state, env, update.message.message_id);
}

export async function handleCompetitions(update: TelegramCallbackQuery, state: UserState, env: Env) {
    await editMessageText(update.message.chat.id, update.message.message_id, "–†–∞–∑–¥–µ–ª '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", env, makeKeyboard([[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: CB.SHOW_MAIN_MENU }]]));
}

export async function handleGoals(update: TelegramCallbackQuery, state: UserState, env: Env) {
    await editMessageText(update.message.chat.id, update.message.message_id, "–†–∞–∑–¥–µ–ª '–ú–æ–∏ —Ü–µ–ª–∏' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", env, makeKeyboard([[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: CB.SHOW_MAIN_MENU }]]));
}

export async function handleManageBets(update: TelegramCallbackQuery, state: UserState, env: Env) {
    await editMessageText(update.message.chat.id, update.message.message_id, "–†–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏' –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ.", env, makeKeyboard([[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: CB.SHOW_MAIN_MENU }]]));
}

export async function handleAiAnalyst(update: TelegramCallbackQuery, state: UserState, env: Env) {
    await deleteMessage(update.message.chat.id, update.message.message_id, env).catch(e => console.error("Failed to delete message:", e));
    await startAiChatDialog(update.message.chat.id, state, env);
}

export async function handleManage(update: TelegramMessage, state: UserState, env: Env) {
    await sendMessage(update.chat.id, "–†–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏' –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ.", env);
}

export async function handleGetCode(update: TelegramMessage, state: UserState, env: Env) {
    await sendMessage(update.chat.id, "–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", env);
}

export async function handleUnknownCommand(update: TelegramMessage, state: UserState, env: Env) {
    await sendMessage(update.chat.id, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.", env);
}

export async function handleAuth(message: TelegramMessage, code: string, env: Env) {
    const chatId = message.chat.id;
    try {
        const key = `tgauth:${code}`;
        const dataString = await env.BOT_STATE.get(key);
        if (!dataString) {
            await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥.", env);
            return;
        }
        await env.BOT_STATE.delete(key);

        const userData = JSON.parse(dataString);
        const newState = normalizeState(userData);

        if (!newState.user) throw new Error("User data from KV is invalid.");
        
        // Save the full state to a persistent user-specific key for future logins
        await env.BOT_STATE.put(`betdata:${newState.user.email}`, JSON.stringify(newState));
        
        // Save/update the user object in our userStore for global lookups
        const existingUser = await userStore.findUserBy(u => u.email === newState.user!.email, env);
        if (!existingUser) {
            await userStore.addUser(newState.user, env);
        } else {
            await userStore.updateUser(newState.user, env);
        }
        
        await setUserState(chatId, newState, env);
        await sendMessage(chatId, `‚úÖ *–£—Å–ø–µ—à–Ω–æ!* –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "${newState.user.nickname}" –ø—Ä–∏–≤—è–∑–∞–Ω.`, env);
        await showMainMenu(message, env);
    } catch (error) {
        await reportError(chatId, env, 'Auth Handler', error);
    }
}
