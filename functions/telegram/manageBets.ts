// functions/telegram/manageBets.ts

import { TelegramCallbackQuery, UserState, Env, BetStatus } from './types';
import { editMessageText } from './telegramApi';
import { makeKeyboard } from './ui';
import { CB } from './router';

const BETS_PER_PAGE = 5;

/**
 * Main router for the bet management section.
 * It delegates to list view or detail view based on callback data.
 * @param update The incoming callback query.
 * @param state The current user state.
 * @param env The Cloudflare environment.
 */
export async function manageBets(update: TelegramCallbackQuery, state: UserState, env: Env) {
    const data = update.data;
    const chatId = update.message.chat.id;
    const messageId = update.message.message_id;

    if (data.startsWith(CB.VIEW_BET)) {
        const betId = data.split(':')[1];
        await viewBetDetail(chatId, messageId, state, betId, env);
    } else {
        // Default to list view (handles CB.MANAGE_BETS, CB.LIST_BETS, pagination)
        let page = 0;
        if (data.startsWith(CB.NEXT_PAGE) || data.startsWith(CB.PREV_PAGE)) {
            page = parseInt(data.split(':')[1], 10);
        }
        await listBets(chatId, messageId, state, page, env);
    }
}

/**
 * Renders a paginated list of the user's bets.
 * @param chatId The chat ID.
 * @param messageId The message ID to edit.
 * @param state The current user state.
 * @param page The page number to display (0-indexed).
 * @param env The Cloudflare environment.
 */
async function listBets(chatId: number, messageId: number, state: UserState, page: number, env: Env) {
    if (!state.bets || state.bets.length === 0) {
        await editMessageText(chatId, messageId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.", env, makeKeyboard([[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: CB.BACK_TO_MAIN }]]));
        return;
    }

    const sortedBets = [...state.bets].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    const totalPages = Math.ceil(sortedBets.length / BETS_PER_PAGE);
    const startIndex = page * BETS_PER_PAGE;
    const betsToShow = sortedBets.slice(startIndex, startIndex + BETS_PER_PAGE);

    let text = `*üìà –í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages})*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.`;

    const betButtons = betsToShow.map(bet => {
        const date = new Date(bet.createdAt).toLocaleDateString('ru-RU');
        const profit = bet.profit !== undefined ? (bet.profit > 0 ? `+${bet.profit.toFixed(2)}` : `${bet.profit.toFixed(2)}`) : '...';
        const statusIcon = { [BetStatus.Won]: '‚úÖ', [BetStatus.Lost]: '‚ùå', [BetStatus.Pending]: '‚è≥', [BetStatus.Void]: '‚ö™Ô∏è', [BetStatus.CashedOut]: 'üí∞' }[bet.status];
        
        // Truncate long event names for button text
        const eventText = bet.event.length > 35 ? `${bet.event.substring(0, 32)}...` : bet.event;
        return [{ text: `${statusIcon} ${date} | ${eventText}`, callback_data: `${CB.VIEW_BET}:${bet.id}` }];
    });
    
    const navButtons = [];
    if (page > 0) {
        navButtons.push({ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥.', callback_data: `${CB.PREV_PAGE}:${page - 1}` });
    }
    if (page < totalPages - 1) {
        navButtons.push({ text: '–°–ª–µ–¥. ‚û°Ô∏è', callback_data: `${CB.NEXT_PAGE}:${page + 1}` });
    }

    const keyboard = makeKeyboard([
        ...betButtons,
        navButtons,
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: CB.BACK_TO_MAIN }]
    ]);

    await editMessageText(chatId, messageId, text, env, keyboard);
}

/**
 * Renders the details of a single bet.
 * @param chatId The chat ID.
 * @param messageId The message ID to edit.
 * @param state The current user state.
 * @param betId The ID of the bet to view.
 * @param env The Cloudflare environment.
 */
async function viewBetDetail(chatId: number, messageId: number, state: UserState, betId: string, env: Env) {
    const bet = state.bets.find(b => b.id === betId);
    if (!bet) {
        await editMessageText(chatId, messageId, "–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", env, makeKeyboard([[{ text: '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É', callback_data: CB.LIST_BETS }]]));
        return;
    }

    const statusLabel = { [BetStatus.Won]: '–í—ã–∏–≥—Ä—ã—à', [BetStatus.Lost]: '–ü—Ä–æ–∏–≥—Ä—ã—à', [BetStatus.Pending]: '–í –æ–∂–∏–¥–∞–Ω–∏–∏', [BetStatus.Void]: '–í–æ–∑–≤—Ä–∞—Ç', [BetStatus.CashedOut]: '–ö—ç—à–∞—É—Ç' }[bet.status];
    const profitText = bet.profit !== undefined && bet.status !== BetStatus.Pending ? `*–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫:* ${bet.profit > 0 ? '+' : ''}${bet.profit.toFixed(2)} ‚ÇΩ` : '';

    const text = `*üìã –î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–∫–∏*

*–°–æ–±—ã—Ç–∏–µ:* \`${bet.event}\`
*–°–ø–æ—Ä—Ç:* ${bet.sport}
*–î–∞—Ç–∞:* ${new Date(bet.createdAt).toLocaleString('ru-RU')}
*–°—É–º–º–∞:* ${bet.stake.toFixed(2)} ‚ÇΩ
*–ö–æ—ç—Ñ.:* ${bet.odds.toFixed(2)}
*–°—Ç–∞—Ç—É—Å:* ${statusLabel}
${profitText}`;

    const keyboard = makeKeyboard([
        // Edit/Delete buttons can be added here in the future.
        [{ text: '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å—Ç–∞–≤–æ–∫', callback_data: CB.LIST_BETS }]
    ]);

    await editMessageText(chatId, messageId, text, env, keyboard);
}
