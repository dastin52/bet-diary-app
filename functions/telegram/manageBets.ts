// functions/telegram/manageBets.ts
import { TelegramCallbackQuery, UserState, Env, BetStatus, BankTransactionType, Bet } from './types';
import { editMessageText } from './telegramApi';
import { makeKeyboard } from './ui';
import { CB, buildManageCb, MANAGE_ACTIONS } from './router';
import { setUserState } from './state';
import { calculateProfit } from '../utils/betUtils';

const BETS_PER_PAGE = 5;

// --- UTILITY ---
function applyBetUpdateToState(
    state: UserState,
    betId: string,
    updates: Partial<Bet>,
    profitChange: number,
    transactionType: BankTransactionType,
    description: string
): UserState {
    const newState = { ...state };
    let betUpdated = false;

    newState.bets = newState.bets.map(b => {
        if (b.id === betId) {
            betUpdated = true;
            return { ...b, ...updates };
        }
        return b;
    });
    
    if (!betUpdated) return state;

    if (profitChange !== 0) {
        const newBalance = newState.bankroll + profitChange;
        const newTransaction = {
            id: new Date().toISOString() + Math.random(),
            timestamp: new Date().toISOString(),
            type: transactionType,
            amount: profitChange,
            previousBalance: newState.bankroll,
            newBalance,
            description,
            betId,
        };
        newState.bankHistory = [newTransaction, ...newState.bankHistory];
        newState.bankroll = newBalance;
    }

    return newState;
}


// --- MAIN ROUTER for this module ---

export async function manageBets(update: TelegramCallbackQuery, state: UserState, env: Env) {
    const data = update.data;
    const chatId = update.message.chat.id;
    const messageId = update.message.message_id;
    
    // Entry point from main menu
    if (data === CB.MANAGE_BETS) {
        await listBets(chatId, messageId, state, 0, env);
        return;
    }
    
    const parts = data.split('|');
    const command = parts[1];
    const args = parts.slice(2);

    switch(command) {
        case MANAGE_ACTIONS.LIST:
            await listBets(chatId, messageId, state, parseInt(args[0] || '0', 10), env);
            break;
        case MANAGE_ACTIONS.VIEW:
            await viewBetDetail(chatId, messageId, state, args[0], parseInt(args[1] || '0', 10), env);
            break;
        case MANAGE_ACTIONS.PROMPT_STATUS:
            await showStatusSelector(chatId, messageId, args[0], parseInt(args[1] || '0', 10), env);
            break;
        case MANAGE_ACTIONS.SET_STATUS:
            await setBetStatus(chatId, messageId, state, args[0], parseInt(args[1] || '0', 10), args[2] as BetStatus, env);
            break;
        case MANAGE_ACTIONS.PROMPT_DELETE:
            await showDeleteConfirmation(chatId, messageId, args[0], parseInt(args[1] || '0', 10), env);
            break;
        case MANAGE_ACTIONS.CONFIRM_DELETE:
            await deleteBet(chatId, messageId, state, args[0], parseInt(args[1] || '0', 10), env);
            break;
        default:
             await listBets(chatId, messageId, state, 0, env);
    }
}


// --- VIEW FUNCTIONS (UI Rendering) ---

async function listBets(chatId: number, messageId: number, state: UserState, page: number, env: Env) {
    const sortedBets = [...state.bets].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    
    if (sortedBets.length === 0) {
        await editMessageText(chatId, messageId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫.", env, makeKeyboard([[{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: CB.BACK_TO_MAIN }]]));
        return;
    }

    const totalPages = Math.ceil(sortedBets.length / BETS_PER_PAGE);
    page = Math.max(0, Math.min(page, totalPages - 1));
    const startIndex = page * BETS_PER_PAGE;
    const betsToShow = sortedBets.slice(startIndex, startIndex + BETS_PER_PAGE);

    let text = `*üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏ (–°—Ç—Ä. ${page + 1}/${totalPages})*`;

    const betButtons = betsToShow.map(bet => {
        const statusIcon = { [BetStatus.Won]: '‚úÖ', [BetStatus.Lost]: '‚ùå', [BetStatus.Pending]: '‚è≥', [BetStatus.Void]: '‚ö™Ô∏è', [BetStatus.CashedOut]: 'üí∞' }[bet.status];
        const eventText = bet.event.length > 40 ? `${bet.event.substring(0, 37)}...` : bet.event;
        return [{ text: `${statusIcon} ${eventText}`, callback_data: buildManageCb(MANAGE_ACTIONS.VIEW, bet.id, page) }];
    });
    
    const navButtons = [];
    if (page > 0) navButtons.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: buildManageCb(MANAGE_ACTIONS.LIST, page - 1) });
    if (page < totalPages - 1) navButtons.push({ text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data: buildManageCb(MANAGE_ACTIONS.LIST, page + 1) });

    const keyboard = makeKeyboard([
        ...betButtons,
        navButtons,
        [{ text: '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: CB.BACK_TO_MAIN }]
    ]);

    await editMessageText(chatId, messageId, text, env, keyboard);
}


async function viewBetDetail(chatId: number, messageId: number, state: UserState, betId: string, page: number, env: Env) {
    const bet = state.bets.find(b => b.id === betId);
    if (!bet) {
        await editMessageText(chatId, messageId, "–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", env, makeKeyboard([[{ text: '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É', callback_data: buildManageCb(MANAGE_ACTIONS.LIST, page) }]]));
        return;
    }

    const statusLabel = { [BetStatus.Won]: '–í—ã–∏–≥—Ä—ã—à', [BetStatus.Lost]: '–ü—Ä–æ–∏–≥—Ä—ã—à', [BetStatus.Pending]: '–í –æ–∂–∏–¥–∞–Ω–∏–∏', [BetStatus.Void]: '–í–æ–∑–≤—Ä–∞—Ç', [BetStatus.CashedOut]: '–ö—ç—à–∞—É—Ç' }[bet.status];
    const profitText = bet.profit !== undefined && bet.status !== BetStatus.Pending ? `*–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫:* ${bet.profit > 0 ? '+' : ''}${bet.profit.toFixed(2)} ‚ÇΩ` : '';

    const text = `*üìã –î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–∫–∏*

*–°–æ–±—ã—Ç–∏–µ:* \`${bet.event}\`
*–°–ø–æ—Ä—Ç:* ${bet.sport}
*–î–∞—Ç–∞:* ${new Date(bet.createdAt).toLocaleString('ru-RU')}
*–°—É–º–º–∞:* ${bet.stake.toFixed(2)} ‚ÇΩ
*–ö–æ—ç—Ñ.:* ${bet.odds.toFixed(2)}
*–°—Ç–∞—Ç—É—Å:* ${statusLabel}
${profitText}`;

    const actionButton = bet.status === BetStatus.Pending
        ? { text: 'üîÑ –°—Ç–∞—Ç—É—Å', callback_data: buildManageCb(MANAGE_ACTIONS.PROMPT_STATUS, bet.id, page) }
        : { text: 'üîÑ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: buildManageCb(MANAGE_ACTIONS.SET_STATUS, bet.id, page, BetStatus.Pending) };
        
    const keyboard = makeKeyboard([
        [actionButton, { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: buildManageCb(MANAGE_ACTIONS.PROMPT_DELETE, bet.id, page) }],
        [{ text: '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É', callback_data: buildManageCb(MANAGE_ACTIONS.LIST, page) }]
    ]);

    await editMessageText(chatId, messageId, text, env, keyboard);
}

async function showStatusSelector(chatId: number, messageId: number, betId: string, page: number, env: Env) {
    const text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ç–∞–≤–∫–∏:";
    const keyboard = makeKeyboard([
        [
            { text: '‚úÖ –í—ã–∏–≥—Ä—ã—à', callback_data: buildManageCb(MANAGE_ACTIONS.SET_STATUS, betId, page, BetStatus.Won) },
            { text: '‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à', callback_data: buildManageCb(MANAGE_ACTIONS.SET_STATUS, betId, page, BetStatus.Lost) },
        ],
        [
            { text: '‚ö™Ô∏è –í–æ–∑–≤—Ä–∞—Ç', callback_data: buildManageCb(MANAGE_ACTIONS.SET_STATUS, betId, page, BetStatus.Void) },
            { text: 'üí∞ –ö—ç—à–∞—É—Ç', callback_data: buildManageCb(MANAGE_ACTIONS.SET_STATUS, betId, page, BetStatus.CashedOut) },
        ],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: buildManageCb(MANAGE_ACTIONS.VIEW, betId, page) }]
    ]);
    await editMessageText(chatId, messageId, text, env, keyboard);
}

async function showDeleteConfirmation(chatId: number, messageId: number, betId: string, page: number, env: Env) {
    const text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.";
    const keyboard = makeKeyboard([
        [{ text: 'üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: buildManageCb(MANAGE_ACTIONS.CONFIRM_DELETE, betId, page) }],
        [{ text: '‚¨ÖÔ∏è –ù–µ—Ç, –Ω–∞–∑–∞–¥', callback_data: buildManageCb(MANAGE_ACTIONS.VIEW, betId, page) }]
    ]);
    await editMessageText(chatId, messageId, text, env, keyboard);
}

// --- ACTION FUNCTIONS (State Modification) ---

async function setBetStatus(chatId: number, messageId: number, state: UserState, betId: string, page: number, newStatus: BetStatus, env: Env) {
    const originalBet = state.bets.find(b => b.id === betId);
    if (!originalBet) {
        await editMessageText(chatId, messageId, "–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", env, makeKeyboard([[{ text: '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É', callback_data: buildManageCb(MANAGE_ACTIONS.LIST, page) }]]));
        return;
    }

    // Handle cashed out separately as it needs manual profit input
    if (newStatus === BetStatus.CashedOut) {
        // In a real scenario, you'd start another dialog step here to ask for the cashout amount.
        // For simplicity, we'll just mark it as void for now.
        await editMessageText(chatId, messageId, "–§—É–Ω–∫—Ü–∏—è –ö—ç—à–∞—É—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏. –ó–¥–µ—Å—å –æ–Ω–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ –í–æ–∑–≤—Ä–∞—Ç.", env);
        newStatus = BetStatus.Void; // Fallback
    }

    const wasSettled = originalBet.status !== BetStatus.Pending;
    const originalProfit = wasSettled ? (originalBet.profit ?? calculateProfit(originalBet)) : 0;

    const updatedBetPartial = { ...originalBet, status: newStatus };
    const newProfit = calculateProfit(updatedBetPartial);
    const profitChange = newProfit - originalProfit;
    
    let transactionType: BankTransactionType;
    let description: string;

    if (newStatus === BetStatus.Pending) {
        transactionType = BankTransactionType.Correction;
        description = `–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—á–µ—Ç–∞: ${originalBet.event}`;
    } else {
        transactionType = profitChange > 0 ? BankTransactionType.BetWin : BankTransactionType.BetLoss;
        if (newStatus === BetStatus.Void) transactionType = BankTransactionType.BetVoid;
        description = `–°—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: ${originalBet.event}`;
    }

    const newState = applyBetUpdateToState(state, betId, { status: newStatus, profit: newProfit }, profitChange, transactionType, description);
    
    await setUserState(chatId, newState, env);
    if (newState.user) {
        await env.BOT_STATE.put(`betdata:${newState.user.email}`, JSON.stringify(newState));
    }
    
    // Return to the list view after status update
    await listBets(chatId, messageId, newState, page, env);
}

async function deleteBet(chatId: number, messageId: number, state: UserState, betId: string, page: number, env: Env) {
    const betToDelete = state.bets.find(b => b.id === betId);
    if (!betToDelete) {
        await editMessageText(chatId, messageId, "–°—Ç–∞–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", env);
        return;
    }

    const profitToReverse = betToDelete.profit ?? 0;
    let newState = state;

    if (betToDelete.status !== BetStatus.Pending && profitToReverse !== 0) {
        newState = applyBetUpdateToState(
            state,
            betId,
            {},
            -profitToReverse,
            BankTransactionType.Correction,
            `–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏: ${betToDelete.event}`
        );
    }
    
    newState.bets = newState.bets.filter(b => b.id !== betId);

    await setUserState(chatId, newState, env);
    if (newState.user) {
        await env.BOT_STATE.put(`betdata:${newState.user.email}`, JSON.stringify(newState));
    }

    await listBets(chatId, messageId, newState, page, env);
}
