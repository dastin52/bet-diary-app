
// functions/telegram/ui.ts
import { Env, TelegramMessage, TelegramCallbackQuery } from './types';
import { editMessageText, sendMessage } from './telegramApi';
import { CB } from './router';

export const makeKeyboard = (options: { text: string, callback_data: string }[][]) => {
    return { inline_keyboard: options };
};

const isCallback = (update: TelegramMessage | TelegramCallbackQuery): update is TelegramCallbackQuery => 'data' in update;

export async function showMainMenu(update: TelegramMessage | TelegramCallbackQuery, env: Env) {
    const chatId = isCallback(update) ? update.message.chat.id : update.chat.id;
    const text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
    const keyboard = makeKeyboard([
        [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: CB.SHOW_STATS }, { text: 'üìù –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É', callback_data: CB.ADD_BET }],
        [{ text: 'üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', callback_data: CB.SHOW_COMPETITIONS }, { text: 'üéØ –ú–æ–∏ —Ü–µ–ª–∏', callback_data: CB.SHOW_GOALS }],
        [{ text: 'üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏', callback_data: CB.MANAGE_BETS }],
        [{ text: 'ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫', callback_data: CB.SHOW_AI_ANALYST }]
    ]);

    if (isCallback(update) && update.message) {
        await editMessageText(chatId, update.message.message_id, text, env, keyboard);
    } else {
        await sendMessage(chatId, text, env, keyboard);
    }
}

export async function showLoginOptions(update: TelegramMessage | TelegramCallbackQuery, env: Env, customText?: string) {
    const chatId = isCallback(update) ? update.message.chat.id : update.chat.id;
    const text = customText || '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.';
    
    const keyboard = makeKeyboard([
        [{ text: 'üîë –í–æ–π—Ç–∏', callback_data: CB.LOGIN }, { text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: CB.REGISTER }]
    ]);

    if (isCallback(update) && update.message) {
        await editMessageText(chatId, update.message.message_id, text, env, keyboard);
    } else {
        await sendMessage(chatId, text, env, keyboard);
    }
}
