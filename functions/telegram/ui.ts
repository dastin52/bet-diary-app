// functions/telegram/ui.ts
import { Env, TelegramUpdatePayload } from './types';
import { editMessageText, sendMessage } from './telegramApi';
import { CB } from './router';

export const makeKeyboard = (options: { text: string, callback_data: string }[][]) => ({ inline_keyboard: options });

export async function showMainMenu(chatId: number, messageId: number | null, env: Env, text?: string) {
    const messageText = text || 'üëã –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
    const keyboard = makeKeyboard([
        [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: CB.SHOW_STATS },
            { text: 'üìù –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É', callback_data: CB.ADD_BET },
        ],
        [
            { text: 'üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', callback_data: CB.COMPETITIONS },
            { text: 'üéØ –ú–æ–∏ —Ü–µ–ª–∏', callback_data: CB.GOALS }
        ],
        [
            { text: 'üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏', callback_data: CB.MANAGE_BETS },
        ],
        [
             { text: 'ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫', callback_data: CB.AI_CHAT }
        ]
    ]);
    if (messageId) {
        try {
            await editMessageText(chatId, messageId, messageText, env, keyboard);
        } catch (e) {
            // Message might have been deleted, send a new one
            await sendMessage(chatId, messageText, env, keyboard);
        }
    } else {
        await sendMessage(chatId, messageText, env, keyboard);
    }
}

export async function showStatsMenu(chatId: number, messageId: number, text: string, env: Env) {
    const keyboard = makeKeyboard([
        [
            { text: 'üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: CB.SHOW_DETAILED_ANALYTICS },
            { text: 'üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data: CB.DOWNLOAD_ANALYTICS_REPORT }
        ],
        [{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: CB.BACK_TO_MAIN }]
    ]);
    await editMessageText(chatId, messageId, text, env, keyboard);
}
