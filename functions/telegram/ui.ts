// functions/telegram/ui.ts
import { Env } from './types';
import { editMessageText, sendMessage } from './telegramApi';
import { CB, buildStatsCb } from './router';
import { AnalyticsPeriod } from './analytics';

export const makeKeyboard = (options: { text: string, callback_data: string }[][]) => ({ inline_keyboard: options });

export async function showMainMenu(chatId: number, messageId: number | null, env: Env, text?: string) {
    const messageText = text || 'üëã –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
    const keyboard = makeKeyboard([
        [
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: CB.SHOW_STATS },
            { text: 'üìù –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É', callback_data: CB.ADD_BET },
        ],
        [
            { text: 'üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', callback_data: CB.COMPETITIONS },
            { text: 'üéØ –ú–æ–∏ —Ü–µ–ª–∏', callback_data: CB.GOALS }
        ],
        [
            { text: 'üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏', callback_data: CB.MANAGE_BETS },
            { text: 'üèí –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏', callback_data: CB.MATCHES }
        ],
        [
            { text: 'ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫', callback_data: CB.AI_CHAT },
            { text: 'üîÆ –ë–∞–∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ AI', callback_data: CB.AI_PREDICTIONS }
        ]
    ]);
    if (messageId) {
        try {
            await editMessageText(chatId, messageId, messageText, env, keyboard);
        } catch (e) {
            await sendMessage(chatId, messageText, env, keyboard);
        }
    } else {
        await sendMessage(chatId, messageText, env, keyboard);
    }
}

const periodLabels: Record<AnalyticsPeriod, string> = {
    week: '–ù–µ–¥–µ–ª—è',
    month: '–ú–µ—Å—è—Ü',
    quarter: '–ö–≤–∞—Ä—Ç–∞–ª',
    year: '–ì–æ–¥',
    all_time: '–í—Å–µ –≤—Ä–µ–º—è',
};

export async function showStatsMenu(chatId: number, messageId: number | null, text: string, currentPeriod: AnalyticsPeriod, env: Env) {
    
    const periodButtonsRow1 = (['week', 'month', 'quarter'] as AnalyticsPeriod[]).map(p => ({
        text: currentPeriod === p ? `[ ${periodLabels[p]} ]` : periodLabels[p],
        callback_data: buildStatsCb('show', p)
    }));

    const periodButtonsRow2 = (['year', 'all_time'] as AnalyticsPeriod[]).map(p => ({
        text: currentPeriod === p ? `[ ${periodLabels[p]} ]` : periodLabels[p],
        callback_data: buildStatsCb('show', p)
    }));

    const keyboard = makeKeyboard([
        periodButtonsRow1,
        periodButtonsRow2,
        [
            { text: 'üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: buildStatsCb('detailed', currentPeriod) },
            { text: 'üì• –°–∫–∞—á–∞—Ç—å HTML', callback_data: buildStatsCb('download', currentPeriod) }
        ],
        [{ text: '‚¨ÖÔ∏è –í –º–µ–Ω—é', callback_data: CB.BACK_TO_MAIN }]
    ]);

    const titleText = text; // Main text now includes period

    if (messageId) {
         await editMessageText(chatId, messageId, titleText, env, keyboard);
    } else {
        await sendMessage(chatId, titleText, env, keyboard);
    }
}