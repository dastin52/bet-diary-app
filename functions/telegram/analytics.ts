// functions/telegram/analytics.ts
import { UserState, BetStatus, Bet } from './types';
import { BET_TYPE_OPTIONS } from '../constants';

// Helper to calculate analytics data from user state
function calculateAnalytics(state: UserState) {
    const settledBets = state.bets.filter(b => b.status !== BetStatus.Pending);
    const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
    const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
    const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
    const wonBets = settledBets.filter(b => b.status === BetStatus.Won);
    const lostBets = settledBets.filter(b => b.status === BetStatus.Lost);
    const nonVoidBets = settledBets.filter(b => b.status !== BetStatus.Void);
    const winRate = nonVoidBets.length > 0 ? (wonBets.length / nonVoidBets.length) * 100 : 0;

    const statsBySport = settledBets.reduce((acc, bet) => {
        if (!acc[bet.sport]) acc[bet.sport] = { profit: 0, staked: 0, wins: 0, losses: 0 };
        acc[bet.sport].profit += bet.profit ?? 0;
        acc[bet.sport].staked += bet.stake;
        if (bet.status === BetStatus.Won) acc[bet.sport].wins++;
        if (bet.status === BetStatus.Lost) acc[bet.sport].losses++;
        return acc;
    }, {} as { [key: string]: { profit: number; staked: number; wins: number; losses: number } });

    const statsByBetType = settledBets.reduce((acc, bet) => {
        const typeLabel = BET_TYPE_OPTIONS.find(o => o.value === bet.betType)?.label || bet.betType;
        if (!acc[typeLabel]) acc[typeLabel] = { profit: 0, staked: 0 };
        acc[typeLabel].profit += bet.profit ?? 0;
        acc[typeLabel].staked += bet.stake;
        return acc;
    }, {} as { [key: string]: { profit: number; staked: number } });

    const oddsRanges = [
        { label: '1.0-1.5', min: 1, max: 1.5, bets: [] as Bet[] },
        { label: '1.5-2.0', min: 1.5, max: 2.0, bets: [] as Bet[] },
        { label: '2.0-2.5', min: 2.0, max: 2.5, bets: [] as Bet[] },
        { label: '2.5+', min: 2.5, max: Infinity, bets: [] as Bet[] },
    ];
    settledBets.forEach(bet => {
        const range = oddsRanges.find(r => bet.odds >= r.min && bet.odds < r.max);
        if (range) range.bets.push(bet);
    });

    return {
        bankroll: state.bankroll,
        totalProfit,
        roi,
        turnover: totalStaked,
        totalBets: settledBets.length,
        winRate,
        wonBetsCount: wonBets.length,
        lostBetsCount: lostBets.length,
        statsBySport,
        statsByBetType,
        oddsRanges,
    };
}


export function generateShortStatsReport(state: UserState): string {
    if (!state.user) return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.";
    if (state.bets.filter(b => b.status !== BetStatus.Pending).length === 0) {
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.";
    }

    const analytics = calculateAnalytics(state);
    const profitSign = analytics.totalProfit >= 0 ? '+' : '';
    const profitEmoji = analytics.totalProfit >= 0 ? 'üìà' : 'üìâ';

    return `*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

- üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫:* ${analytics.bankroll.toFixed(2)} ‚ÇΩ
- ${profitEmoji} *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${profitSign}${analytics.totalProfit.toFixed(2)} ‚ÇΩ
- üéØ *ROI:* ${analytics.roi.toFixed(2)}%
- üîÑ *–û–±–æ—Ä–æ—Ç:* ${analytics.turnover.toFixed(2)} ‚ÇΩ
- üé≤ *–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:* ${analytics.totalBets}
- ‚úÖ *–í—ã–∏–≥—Ä—ã—à–∏:* ${analytics.wonBetsCount} | ‚ùå *–ü—Ä–æ–∏–≥—Ä—ã—à–∏:* ${analytics.lostBetsCount}
- üìà *–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* ${analytics.winRate.toFixed(2)}%`;
}


export function generateDetailedReport(state: UserState): string {
    const analytics = calculateAnalytics(state);
    const profitSign = analytics.totalProfit >= 0 ? '+' : '';
    const profitEmoji = analytics.totalProfit >= 0 ? 'üìà' : 'üìâ';

    let report = `*üìù –í–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç*

*–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
- üí∞ *–ë–∞–Ω–∫:* ${analytics.bankroll.toFixed(2)} ‚ÇΩ
- ${profitEmoji} *–ü—Ä–∏–±—ã–ª—å:* ${profitSign}${analytics.totalProfit.toFixed(2)} ‚ÇΩ
- üéØ *ROI:* ${analytics.roi.toFixed(2)}%
- üîÑ *–û–±–æ—Ä–æ—Ç:* ${analytics.turnover.toFixed(2)} ‚ÇΩ
- üé≤ *–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:* ${analytics.totalBets}
- üìà *–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* ${analytics.winRate.toFixed(2)}%
- ‚úÖ *–í—ã–∏–≥—Ä—ã—à–∏ / ‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–∏:* ${analytics.wonBetsCount} / ${analytics.lostBetsCount}
`;

    report += "\n*–ü—Ä–∏–±—ã–ª—å –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞:*\n";
    Object.entries(analytics.statsBySport).forEach(([sport, data]) => {
        const roi = data.staked > 0 ? (data.profit / data.staked) * 100 : 0;
        report += `- ${sport}: ${data.profit >= 0 ? '+' : ''}${data.profit.toFixed(2)} ‚ÇΩ (ROI: ${roi.toFixed(1)}%)\n`;
    });

    report += "\n*–ü—Ä–∏–±—ã–ª—å –ø–æ —Ç–∏–ø–∞–º —Å—Ç–∞–≤–æ–∫:*\n";
    Object.entries(analytics.statsByBetType).forEach(([type, data]) => {
        const roi = data.staked > 0 ? (data.profit / data.staked) * 100 : 0;
        report += `- ${type}: ${data.profit >= 0 ? '+' : ''}${data.profit.toFixed(2)} ‚ÇΩ (ROI: ${roi.toFixed(1)}%)\n`;
    });

    report += "\n*–í/–ü –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞:*\n";
    Object.entries(analytics.statsBySport).forEach(([sport, data]) => {
        report += `- ${sport}: ${data.wins} –í / ${data.losses} –ü\n`;
    });

    report += "\n*–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º:*\n";
    analytics.oddsRanges.forEach(range => {
        const total = range.bets.length;
        if (total === 0) return;
        const wins = range.bets.filter(b => b.status === BetStatus.Won).length;
        const losses = range.bets.filter(b => b.status === BetStatus.Lost).length;
        const passRate = total > 0 ? (wins / (wins + losses)) * 100 : 0;
        const staked = range.bets.reduce((acc, b) => acc + b.stake, 0);
        const profit = range.bets.reduce((acc, b) => acc + (b.profit ?? 0), 0);
        const roi = staked > 0 ? (profit / staked) * 100 : 0;
        report += `- ${range.label}: ${passRate.toFixed(1)}% –ø—Ä–æ—Ö–æ–¥ (${wins}–í/${losses}–ü) | ROI: ${roi.toFixed(1)}%\n`;
    });

    return report;
}


export function generateHtmlReport(state: UserState): string {
    const analytics = calculateAnalytics(state);
    const profitSign = analytics.totalProfit >= 0 ? '+' : '';
    const profitEmoji = analytics.totalProfit >= 0 ? 'üìà' : 'üìâ';

    const tableRow = (cells: string[]) => `<tr>${cells.map(c => `<td>${c}</td>`).join('')}</tr>`;
    const headerRow = (cells: string[]) => `<tr>${cells.map(c => `<th>${c}</th>`).join('')}</tr>`;

    const body = `
        <h1>üìä –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞–≤–∫–∞–º</h1>
        <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}</p>
        
        <h2>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h2>
        <div class="kpi-grid">
            <div class="kpi-card"><span>üí∞ –ë–∞–Ω–∫</span><strong>${analytics.bankroll.toFixed(2)} ‚ÇΩ</strong></div>
            <div class="kpi-card"><span>${profitEmoji} –ü—Ä–∏–±—ã–ª—å</span><strong class="${analytics.totalProfit >= 0 ? 'green' : 'red'}">${profitSign}${analytics.totalProfit.toFixed(2)} ‚ÇΩ</strong></div>
            <div class="kpi-card"><span>üéØ ROI</span><strong class="${analytics.roi >= 0 ? 'green' : 'red'}">${analytics.roi.toFixed(2)}%</strong></div>
            <div class="kpi-card"><span>üîÑ –û–±–æ—Ä–æ—Ç</span><strong>${analytics.turnover.toFixed(2)} ‚ÇΩ</strong></div>
            <div class="kpi-card"><span>üé≤ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫</span><strong>${analytics.totalBets}</strong></div>
            <div class="kpi-card"><span>üìà % –ø–æ–±–µ–¥</span><strong>${analytics.winRate.toFixed(2)}%</strong></div>
            <div class="kpi-card"><span>‚úÖ/‚ùå</span><strong>${analytics.wonBetsCount} / ${analytics.lostBetsCount}</strong></div>
        </div>

        <h2>–ü—Ä–∏–±—ã–ª—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h2>
        <div class="table-grid">
            <div>
                <h3>–ü–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞</h3>
                <table>
                    <thead>${headerRow(['–°–ø–æ—Ä—Ç', '–ü—Ä–∏–±—ã–ª—å', 'ROI'])}</thead>
                    <tbody>
                        ${Object.entries(analytics.statsBySport).map(([sport, data]) => {
                            const roi = data.staked > 0 ? (data.profit / data.staked) * 100 : 0;
                            return tableRow([sport, `${data.profit >= 0 ? '+' : ''}${data.profit.toFixed(2)} ‚ÇΩ`, `${roi.toFixed(1)}%`]);
                        }).join('')}
                    </tbody>
                </table>
            </div>
            <div>
                <h3>–ü–æ —Ç–∏–ø–∞–º —Å—Ç–∞–≤–æ–∫</h3>
                <table>
                     <thead>${headerRow(['–¢–∏–ø', '–ü—Ä–∏–±—ã–ª—å', 'ROI'])}</thead>
                     <tbody>
                        ${Object.entries(analytics.statsByBetType).map(([type, data]) => {
                            const roi = data.staked > 0 ? (data.profit / data.staked) * 100 : 0;
                            return tableRow([type, `${data.profit >= 0 ? '+' : ''}${data.profit.toFixed(2)} ‚ÇΩ`, `${roi.toFixed(1)}%`]);
                        }).join('')}
                    </tbody>
                </table>
            </div>
        </div>
        
        <h2>–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å</h2>
        <div class="table-grid">
             <div>
                <h3>–í/–ü –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞</h3>
                <table>
                    <thead>${headerRow(['–°–ø–æ—Ä—Ç', '–í—ã–∏–≥—Ä—ã—à–∏', '–ü—Ä–æ–∏–≥—Ä—ã—à–∏'])}</thead>
                    <tbody>
                        ${Object.entries(analytics.statsBySport).map(([sport, data]) => 
                            tableRow([sport, String(data.wins), String(data.losses)])
                        ).join('')}
                    </tbody>
                </table>
            </div>
            <div>
                <h3>–ü–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º</h3>
                <table>
                    <thead>${headerRow(['–ö–æ—ç—Ñ.', '–ü—Ä–æ—Ö–æ–¥', '–í/–ü', 'ROI'])}</thead>
                    <tbody>
                        ${analytics.oddsRanges.map(range => {
                            const total = range.bets.length;
                            if (total === 0) return '';
                            const wins = range.bets.filter(b => b.status === BetStatus.Won).length;
                            const losses = range.bets.filter(b => b.status === BetStatus.Lost).length;
                            const passRate = total > 0 ? (wins / (wins + losses)) * 100 : 0;
                             const staked = range.bets.reduce((acc, b) => acc + b.stake, 0);
                             const profit = range.bets.reduce((acc, b) => acc + (b.profit ?? 0), 0);
                             const roi = staked > 0 ? (profit / staked) * 100 : 0;
                            return tableRow([range.label, `${passRate.toFixed(1)}%`, `${wins}/${losses}`, `${roi.toFixed(1)}%`]);
                        }).join('')}
                    </tbody>
                </table>
            </div>
        </div>
    `;

    const html = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–û—Ç—á–µ—Ç BetDiary</title>
        <style>
            body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: #111827; color: #d1d5db; margin: 0; padding: 2rem; }
            h1, h2, h3 { color: #fff; border-bottom: 1px solid #374151; padding-bottom: 0.5rem; }
            .kpi-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin-bottom: 2rem; }
            .kpi-card { background-color: #1f2937; padding: 1rem; border-radius: 0.5rem; text-align: center; border: 1px solid #374151; }
            .kpi-card span { font-size: 0.9rem; color: #9ca3af; }
            .kpi-card strong { display: block; font-size: 1.5rem; color: #fff; }
            .table-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem; }
            table { width: 100%; border-collapse: collapse; }
            th, td { padding: 0.75rem; text-align: left; border-bottom: 1px solid #374151; }
            th { background-color: #374151; color: #fff; }
            tbody tr:hover { background-color: #374151; }
            .green { color: #4ade80; } .red { color: #f87171; }
            @media (max-width: 768px) { .table-grid { grid-template-columns: 1fr; } }
        </style>
    </head>
    <body>${body}</body>
    </html>`;

    return html;
}
