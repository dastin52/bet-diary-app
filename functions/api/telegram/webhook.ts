// functions/api/telegram/webhook.ts

// --- TYPE DEFINITIONS ---
interface KVNamespace {
    put(key: string, value: string, options?: { expiration?: number; expirationTtl?: number; metadata?: any; }): Promise<void>;
    get(key: string, type?: "text" | "json" | "arrayBuffer" | "stream"): Promise<string | null>;
    delete(key: string): Promise<void>;
}

interface Env {
    BOT_STATE: KVNamespace;
    TELEGRAM_BOT_TOKEN: string;
}

interface EventContext<E> {
    request: Request;
    env: E;
}

type PagesFunction<E = unknown> = (context: EventContext<E>) => Response | Promise<Response>;

// Telegram API Types
interface TelegramUser { id: number; }
interface TelegramChat { id: number; }
interface TelegramMessage { message_id: number; from: TelegramUser; chat: TelegramChat; date: number; text?: string; }
interface TelegramCallbackQuery { id: string; from: TelegramUser; message: TelegramMessage; data?: string; }
interface TelegramUpdate { update_id: number; message?: TelegramMessage; callback_query?: TelegramCallbackQuery; }

// App-specific Types
interface User {
  email: string;
  nickname: string;
  password_hash: string;
  registeredAt: string;
  referralCode: string;
  buttercups: number;
  status: 'active' | 'blocked';
}
interface RegistrationState {
    step: 'awaiting_nickname' | 'awaiting_email' | 'awaiting_password';
    data: { nickname?: string; email?: string; };
}

// --- KEYBOARDS ---
const welcomeKeyboard = {
    inline_keyboard: [
        [{ text: "‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data: "register" }],
        [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å —Å–∞–π—Ç–∞", callback_data: "link_account" }]
    ]
};

const mainMenuKeyboard = {
    inline_keyboard: [
        [{ text: "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data: "view_stats" }],
        [{ text: "üìù –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data: "add_bet" }]
    ]
};

// --- TELEGRAM API HELPER ---
const telegramApi = async (token: string, methodName: string, body: object) => {
    try {
        const response = await fetch(`https://api.telegram.org/bot${token}/${methodName}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body),
        });
        if (!response.ok) {
            const result = await response.json();
            console.error(`Telegram API error (${methodName}):`, result.description);
        }
        return response;
    } catch (error) {
        console.error(`Network error calling Telegram API (${methodName}):`, error instanceof Error ? error.message : String(error));
        return new Response('Network error', { status: 500 });
    }
};

// A mock hashing function. In a real app, use a library like bcrypt on the server.
const mockHash = (password: string) => `hashed_${password}`;

// --- MAIN FUNCTION HANDLER ---
export const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {
    // 1. Critical Environment Checks
    if (!env.TELEGRAM_BOT_TOKEN || !env.BOT_STATE) {
        console.error("FATAL: Environment variables or KV bindings are not set.");
        return new Response('OK'); // Respond OK to prevent Telegram retries
    }
    const token = env.TELEGRAM_BOT_TOKEN;
    const kv = env.BOT_STATE;

    try {
        const update = await request.json() as TelegramUpdate;

        // Handle button presses (Callback Queries)
        if (update.callback_query) {
            const { id: callbackQueryId, from, message, data: callbackData } = update.callback_query;
            const chatId = message.chat.id;

            await telegramApi(token, 'answerCallbackQuery', { callback_query_id: callbackQueryId });

            switch (callbackData) {
                case 'register':
                    const registrationState: RegistrationState = { step: 'awaiting_nickname', data: {} };
                    await kv.put(`state:tg:${from.id}`, JSON.stringify(registrationState));
                    await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç.\n\n–ö–∞–∫–æ–π —É –≤–∞—Å –±—É–¥–µ—Ç –Ω–∏–∫–Ω–µ–π–º? (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞)" });
                    break;
                case 'link_account':
                    await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚ûî '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram') –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ." });
                    break;
                case 'view_stats':
                case 'add_bet':
                    await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "‚úÖ –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!" });
                    break;
            }
            return new Response('OK');
        }

        // Handle regular text messages
        if (update.message) {
            const { chat, from, text } = update.message;
            if (!text) return new Response('OK');

            const chatId = chat.id;
            const fromId = from.id;
            const messageText = text.trim();

            // Check if user is in a registration flow
            const stateJson = await kv.get(`state:tg:${fromId}`);
            if (stateJson) {
                const state: RegistrationState = JSON.parse(stateJson);
                switch (state.step) {
                    case 'awaiting_nickname':
                        if (messageText.length < 3) {
                            await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." });
                            return new Response('OK');
                        }
                        if (await kv.get(`user:nickname:${messageText.toLowerCase()}`)) {
                             await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π." });
                             return new Response('OK');
                        }
                        state.data.nickname = messageText;
                        state.step = 'awaiting_email';
                        await kv.put(`state:tg:${fromId}`, JSON.stringify(state));
                        await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:" });
                        break;

                    case 'awaiting_email':
                        const email = messageText.toLowerCase();
                        if (!/^\S+@\S+\.\S+$/.test(email)) {
                            await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑." });
                            return new Response('OK');
                        }
                         if (await kv.get(`user:email:${email}`)) {
                             await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é." });
                             await kv.delete(`state:tg:${fromId}`);
                             return new Response('OK');
                        }
                        state.data.email = email;
                        state.step = 'awaiting_password';
                        await kv.put(`state:tg:${fromId}`, JSON.stringify(state));
                        await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):" });
                        break;
                    
                    case 'awaiting_password':
                        if (messageText.length < 6) {
                            await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." });
                            return new Response('OK');
                        }
                        const newUser: User = {
                            email: state.data.email!,
                            nickname: state.data.nickname!,
                            password_hash: mockHash(messageText),
                            registeredAt: new Date().toISOString(),
                            referralCode: `${state.data.nickname!.toUpperCase().replace(/\s/g, '')}${Date.now().toString().slice(-4)}`,
                            buttercups: 0,
                            status: 'active',
                        };
                        // Store the new user data
                        await kv.put(`user:email:${newUser.email}`, JSON.stringify(newUser));
                        await kv.put(`user:nickname:${newUser.nickname.toLowerCase()}`, newUser.email);
                        // Link Telegram ID to email
                        await kv.put(`user:tg:${fromId}`, newUser.email);
                        // Clean up state
                        await kv.delete(`state:tg:${fromId}`);
                        
                        await telegramApi(token, 'sendMessage', {
                            chat_id: chatId,
                            text: `üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è ${newUser.email} —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω.`,
                            reply_markup: mainMenuKeyboard
                        });
                        break;
                }
                return new Response('OK');
            }

            // Standard command/message handling
            if (messageText === '/start') {
                const userEmail = await kv.get(`user:tg:${fromId}`);
                if (userEmail) {
                    await telegramApi(token, 'sendMessage', { chat_id: chatId, text: `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ ${userEmail}.`, reply_markup: mainMenuKeyboard });
                } else {
                    await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–Ω–µ–≤–Ω–∏–∫ –°—Ç–∞–≤–æ–∫!", reply_markup: welcomeKeyboard });
                }
            } else if (/^\d{6}$/.test(messageText)) { // Handle 6-digit auth code
                const code = messageText;
                const authKey = `authcode:${code}`;
                const email = await kv.get(authKey);

                if (email) {
                    await kv.put(`user:tg:${fromId}`, email);
                    await kv.delete(authKey);
                    await telegramApi(token, 'sendMessage', { chat_id: chatId, text: `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è ${email} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!`, reply_markup: mainMenuKeyboard });
                } else {
                    await telegramApi(token, 'sendMessage', { chat_id: chatId, text: `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.` });
                }
            } else {
                 await telegramApi(token, 'sendMessage', { chat_id: chatId, text: "–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏." });
            }
        }

    } catch (e: any) {
        console.error("--- UNHANDLED FATAL ERROR IN WEBHOOK ---");
        console.error("Error message:", e.message);
        console.error("Error stack:", e.stack);
    }
    
    return new Response('OK');
};
