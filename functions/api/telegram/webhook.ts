// functions/api/telegram/webhook.ts

interface KVNamespace {
    put(key: string, value: string, options?: { expiration?: number; expirationTtl?: number; metadata?: any; }): Promise<void>;
    get(key: string, type?: "text" | "json" | "arrayBuffer" | "stream"): Promise<string | any | ArrayBuffer | ReadableStream | null>;
}

interface EventContext<Env> {
    request: Request;
    env: Env;
}

type PagesFunction<Env = unknown> = (
    context: EventContext<Env>
) => Response | Promise<Response>;

interface Env {
    BOT_STATE: KVNamespace;
    TELEGRAM_BOT_TOKEN: string;
}

// --- Telegram API Helper ---
const telegramApi = async (token: string, methodName: string, body: object) => {
    try {
        const response = await fetch(`https://api.telegram.org/bot${token}/${methodName}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body),
        });
        const result = await response.json();
        if (!result.ok) {
            console.error(`Telegram API error (${methodName}):`, result.description);
        }
        return result;
    } catch (error) {
        console.error(`Failed to call Telegram API (${methodName}):`, error);
        // Re-throw to be caught by the main handler
        throw new Error(`Network error calling Telegram API: ${methodName}`);
    }
};

// --- Main Handler ---
export const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {
    let chatId: number | undefined;

    try {
        // 1. Critical Environment Variable & Binding Checks
        if (!env.TELEGRAM_BOT_TOKEN) {
            console.error("FATAL: TELEGRAM_BOT_TOKEN environment variable is not set in Cloudflare.");
            return new Response('Bot configuration error: Token missing', { status: 500 });
        }
        if (!env.BOT_STATE) {
            console.error("FATAL: BOT_STATE KV Namespace is not bound in Cloudflare.");
            return new Response('Bot configuration error: KV missing', { status: 500 });
        }
        
        const update = await request.json() as any;
        const message = update.message;

        if (!message || !message.chat || !message.chat.id) {
            console.log("Received a non-message update, skipping.");
            return new Response('OK');
        }
        
        // Set chatId as early as possible for error reporting
        chatId = message.chat.id;

        if (!message.text || !message.from || !message.from.id) {
            console.log("Message is missing text or sender info, skipping.");
            return new Response('OK');
        }

        const text = message.text.trim();
        const fromId = message.from.id;

        console.log(`Processing message from chat ID ${chatId}: "${text}"`);

        if (text === '/start') {
            await telegramApi(env.TELEGRAM_BOT_TOKEN, 'sendMessage', {
                chat_id: chatId,
                text: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–Ω–µ–≤–Ω–∏–∫ –°—Ç–∞–≤–æ–∫!\n\n" +
                      "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚ûî '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram') –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.",
            });
        } else if (text === '/stats') {
            const userEmail = await env.BOT_STATE.get(`user:tg:${fromId}`);
            if (userEmail) {
                await telegramApi(env.TELEGRAM_BOT_TOKEN, 'sendMessage', {
                    chat_id: chatId,
                    text: `‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ ${userEmail}.\n\n–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ —á–µ—Ä–µ–∑ Telegram –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`
                });
            } else {
                await telegramApi(env.TELEGRAM_BOT_TOKEN, 'sendMessage', {
                    chat_id: chatId,
                    text: `‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ —Å–∞–π—Ç–µ.`
                });
            }
        } else if (/^\d{6}$/.test(text)) {
            const code = text;
            const email = await env.BOT_STATE.get(`authcode:${code}`);

            if (email) {
                await env.BOT_STATE.put(`user:tg:${fromId}`, email);
                await telegramApi(env.TELEGRAM_BOT_TOKEN, 'sendMessage', {
                   chat_id: chatId,
                   text: `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è ${email} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.`
                });
            } else {
                await telegramApi(env.TELEGRAM_BOT_TOKEN, 'sendMessage', {
                   chat_id: chatId,
                   text: `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
                });
            }
         } else {
             await telegramApi(env.TELEGRAM_BOT_TOKEN, 'sendMessage', {
                chat_id: chatId,
                text: `–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n/stats - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞`
             });
         }
    } catch (e: any) {
        console.error("FATAL ERROR in webhook handler:", e.stack || e.message || e);
        // **DEBUGGING FEATURE**: Report the error back to the user's chat.
        // This will expose server errors to the user, so it should be removed in a stable production environment.
        if (chatId && env.TELEGRAM_BOT_TOKEN) {
             const errorMessage = `üöß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:\n${e.message}`;
             try {
                await telegramApi(env.TELEGRAM_BOT_TOKEN, 'sendMessage', {
                    chat_id: chatId,
                    text: errorMessage.substring(0, 4096) // Telegram message limit
                });
             } catch (sendError) {
                 console.error("Failed to even send the error message to Telegram:", sendError);
             }
        }
    }
    
    // Always respond to Telegram with 200 OK to prevent message retries.
    return new Response('OK');
};