// functions/api/telegram/webhook.ts

// --- TYPE DEFINITIONS ---
import { Bet, BetLeg, BetStatus, BetType, BankTransaction, BankTransactionType, User, Goal, GoalMetric, GoalStatus, Challenge, Achievement } from '../../../src/types';
import { SPORTS, BOOKMAKERS, BET_STATUS_OPTIONS, BET_TYPE_OPTIONS, MARKETS_BY_SPORT, WEEKLY_CHALLENGES } from '../../../src/constants';
import { GoogleGenAI } from "@google/genai";

// --- COMPETITION TYPES ---
type TimePeriod = 'week' | 'month' | 'year' | 'all_time';

interface ParticipantStats {
    rank: number;
    roi: number;
    totalBets: number;
    wonBets: number;
    lostBets: number;
    biggestWin: number;
    biggestLoss: number;
    totalStaked: number;
    totalProfit: number;
    achievements: Achievement[];
}

interface CompetitionParticipant {
    user: {
        nickname: string;
        email: string;
    };
    stats: ParticipantStats;
}

// --- CORE TYPES ---
interface Env {
    TELEGRAM_BOT_TOKEN: string;
    GEMINI_API_KEY: string;
    BOT_STATE: KVNamespace;
}

interface KVNamespace {
    get(key: string): Promise<string | null>;
    put(key: string, value: string, options?: { expirationTtl?: number }): Promise<void>;
    delete(key: string): Promise<void>;
}

// Full user data stored in KV for the bot
interface UserData {
    email: string;
    nickname: string;
    password_hash: string;
    registeredAt: string;
    referralCode: string;
    buttercups: number;
    status: 'active' | 'blocked';
    bankroll: number;
    bets: Bet[];
    bankHistory: BankTransaction[];
    goals: Goal[];
}

// Temporary state for multi-step dialogs
interface DialogState {
    action: string;
    data: any;
}

type Message = {
  role: 'user' | 'model';
  text: string;
};


interface TelegramUpdate {
    update_id: number;
    message?: TelegramMessage;
    callback_query?: TelegramCallbackQuery;
}

interface TelegramMessage {
    message_id: number;
    from: { id: number; };
    chat: { id: number; type: 'private'; };
    date: number;
    text?: string;
}

interface TelegramCallbackQuery {
    id: string;
    from: { id: number; };
    message: TelegramMessage;
    data: string;
}

interface EventContext<E> {
    request: Request;
    env: E;
}

type PagesFunction<E = unknown> = (context: EventContext<E>) => Response | Promise<Response>;

// --- MOCK HASHING (for compatibility with frontend) ---
const mockHash = (password: string): string => `hashed_${password}`;

// --- RISK MANAGEMENT MODEL ---
const calculateRiskManagedStake = (bankroll: number, odds: number): { stake: number; percentage: number } | null => {
  if (bankroll <= 0 || odds <= 1) return null;
  let percentageOfBankroll: number;
  if (odds < 1.5) percentageOfBankroll = 0.025;
  else if (odds < 2.5) percentageOfBankroll = 0.015;
  else if (odds < 4.0) percentageOfBankroll = 0.0075;
  else percentageOfBankroll = 0.005;

  const recommendedStake = bankroll * Math.min(percentageOfBankroll, 0.05);
  if (recommendedStake < 1) return null;
  return { stake: recommendedStake, percentage: percentageOfBankroll * 100 };
};


// --- UTILS & HELPERS ---
const generateEventString = (legs: BetLeg[], betType: BetType, sport: string): string => {
    if (!legs || legs.length === 0) return '–ü—É—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ';
    if (betType === BetType.Single && legs.length === 1) {
        const leg = legs[0];
        if (!leg.homeTeam || !leg.awayTeam || !leg.market) return '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
        const eventName = ['–¢–µ–Ω–Ω–∏—Å', '–ë–æ–∫—Å', '–ú–ú–ê'].includes(sport) ? `${leg.homeTeam} - ${leg.awayTeam}` : `${leg.homeTeam} vs ${leg.awayTeam}`;
        return `${eventName} - ${leg.market}`;
    }
    if (betType === BetType.Parlay) {
        const count = legs.length;
        if (count === 0) return '–≠–∫—Å–ø—Ä–µ—Å—Å (–ø—É—Å—Ç–æ–π)';
        const endings = { one: '—Å–æ–±—ã—Ç–∏–µ', few: '—Å–æ–±—ã—Ç–∏—è', many: '—Å–æ–±—ã—Ç–∏–π' };
        const ending = (count % 10 === 1 && count % 100 !== 11) ? endings.one : (count % 10 >= 2 && count % 10 <= 4 && (count % 100 < 10 || count % 100 >= 20)) ? endings.few : endings.many;
        return `–≠–∫—Å–ø—Ä–µ—Å—Å (${count} ${ending})`;
    }
    return '–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞';
};

const calculateProfit = (bet: Omit<Bet, 'id' | 'createdAt' | 'event'>): number => {
  switch (bet.status) {
    case BetStatus.Won: return bet.stake * (bet.odds - 1);
    case BetStatus.Lost: return -bet.stake;
    case BetStatus.Void: return 0;
    case BetStatus.CashedOut: return bet.profit ?? 0;
    default: return 0;
  }
};


// --- TELEGRAM API HELPERS ---
async function apiRequest(token: string, method: string, body: object): Promise<any> {
    const url = `https://api.telegram.org/bot${token}/${method}`;
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body),
        });
        const data = await response.json();
        if (!response.ok) {
            console.error(`Telegram API error (${method}):`, data);
        }
        return data;
    } catch (error) {
        console.error(`Failed to call Telegram API (${method}):`, error);
        return null;
    }
}

const sendMessage = (token: string, chatId: number, text: string, reply_markup?: any) =>
    apiRequest(token, 'sendMessage', { chat_id: chatId, text, parse_mode: 'Markdown', reply_markup });

const editMessageText = (token: string, chatId: number, messageId: number, text: string, reply_markup?: any) =>
    apiRequest(token, 'editMessageText', { chat_id: chatId, message_id: messageId, text, parse_mode: 'Markdown', reply_markup });

const answerCallbackQuery = (token: string, callbackQueryId: string, text?: string) =>
    apiRequest(token, 'answerCallbackQuery', { callback_query_id: callbackQueryId, text });

const deleteMessage = (token: string, chatId: number, messageId: number) =>
    apiRequest(token, 'deleteMessage', { chat_id: chatId, message_id: messageId });


// --- KV DATA HELPERS ---
const getUserData = async (kv: KVNamespace, email: string): Promise<UserData | null> => {
    const data = await kv.get(`user:${email}`);
    return data ? JSON.parse(data) : null;
};
const saveUserData = async (kv: KVNamespace, email: string, data: UserData): Promise<void> => {
    await kv.put(`user:${email}`, JSON.stringify(data));
};
const getDialogState = async (kv: KVNamespace, userId: number): Promise<DialogState | null> => {
    const state = await kv.get(`dialog:${userId}`);
    return state ? JSON.parse(state) : null;
};
const setDialogState = async (kv: KVNamespace, userId: number, state: DialogState | null): Promise<void> => {
    if (state === null) {
        await kv.delete(`dialog:${userId}`);
    } else {
        const ttl = ['ai_chat_active', 'add_bet'].includes(state.action) ? 900 : 300;
        await kv.put(`dialog:${userId}`, JSON.stringify(state), { expirationTtl: ttl });
    }
};
const getEmailByNickname = async (kv: KVNamespace, nickname: string): Promise<string | null> => {
    return await kv.get(`nickname:${nickname.toLowerCase()}`);
};
const saveNicknameMapping = async (kv: KVNamespace, nickname: string, email: string): Promise<void> => {
    await kv.put(`nickname:${nickname.toLowerCase()}`, email);
};

// --- COMPETITION HELPERS ---
const ACHIEVEMENTS: { [key: string]: Achievement } = {
    ROI_KING: { id: 'ROI_KING', name: '–ö–æ—Ä–æ–ª—å ROI', description: '–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π ROI –∑–∞ –ø–µ—Ä–∏–æ–¥', icon: 'üëë' },
    LUCKY_HAND: { id: 'LUCKY_HAND', name: '–£–¥–∞—á–ª–∏–≤–∞—è —Ä—É–∫–∞', description: '–°–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à —Å –æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏', icon: 'üí∞' },
    CRAZY_LOSS: { id: 'CRAZY_LOSS', name: '–ë–µ–∑—É–º–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à', description: '–°–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à —Å –æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏', icon: 'üí∏' },
    MARATHON_RUNNER: { id: 'MARATHON_RUNNER', name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü', description: '–ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫', icon: 'üèÉ‚Äç‚ôÇÔ∏è' },
    PARLAY_KING: { id: 'PARLAY_KING', name: '–ö–æ—Ä–æ–ª—å —ç–∫—Å–ø—Ä–µ—Å—Å–æ–≤', description: '–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ —ç–∫—Å–ø—Ä–µ—Å—Å–µ', icon: 'üöÇ' },
};

const getPeriodStart = (period: 'week' | 'month' | 'year'): Date => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    switch (period) {
        case 'week':
            const dayOfWeek = today.getDay();
            const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
            return new Date(today.setDate(diff));
        case 'month': return new Date(today.getFullYear(), today.getMonth(), 1);
        case 'year': return new Date(today.getFullYear(), 0, 1);
    }
};

const getAllUsersData = async (kv: KVNamespace): Promise<UserData[]> => {
    const userListJson = await kv.get('user_list');
    if (!userListJson) return [];
    const userEmails = JSON.parse(userListJson) as string[];
    const userPromises = userEmails.map(email => getUserData(kv, email));
    const usersData = await Promise.all(userPromises);
    return usersData.filter((u): u is UserData => u !== null);
};

// --- AI HELPERS ---
const generalSystemInstruction = (currentDate: string) => `–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º. –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: ${currentDate}. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –¥–∞—Ç—É –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ç–µ–∫—É—â–∏—Ö –∏–ª–∏ –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö. –í–∞—à–∞ —Ü–µ–ª—å ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –º–∞—Ç—á–∏. 1. **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π—Ç–µ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. 2. **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á:** - –ö–æ–≥–¥–∞ –≤–∞—Å –ø—Ä–æ—Å—è—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–∞—Ç–∞–º, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ ${currentDate} –∫–∞–∫ –Ω–∞ "—Å–µ–≥–æ–¥–Ω—è". - –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ñ–æ—Ä–º–∞, –∏—Å—Ç–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á, –Ω–æ–≤–æ—Å—Ç–∏. - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä. - **–í –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ö–æ–¥—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü1, X, –ü2) –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∏—Å—Ö–æ–¥. –í—Å–µ–≥–¥–∞ –ø–æ–æ—â—Ä—è–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∏–≥—Ä—É. –ù–µ –¥–∞–≤–∞–π—Ç–µ –ø—Ä—è–º—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;

const calculateAnalytics = (bets: Bet[], bankroll: number, bankHistory: BankTransaction[]) => {
    const settledBets = bets.filter(b => b.status !== BetStatus.Pending);
    const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
    const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
    const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
    const betCount = settledBets.length;
    const wonBets = settledBets.filter(b => b.status === BetStatus.Won).length;
    const nonVoidBets = settledBets.filter(b => b.status !== BetStatus.Void).length;
    const winRate = nonVoidBets > 0 ? (wonBets / nonVoidBets) * 100 : 0;
    
    const profitBySport = settledBets.reduce((acc, bet) => {
        acc[bet.sport] = (acc[bet.sport] || 0) + (bet.profit ?? 0);
        return acc;
    }, {} as Record<string, number>);

    const profitByBetType = settledBets.reduce((acc, bet) => {
        acc[bet.betType] = (acc[bet.betType] || 0) + (bet.profit ?? 0);
        return acc;
    }, {} as Record<string, number>);

    return {
        totalProfit, roi, betCount, winRate,
        profitBySport: Object.entries(profitBySport).map(([sport, profit]) => ({ sport, profit })),
        profitByBetType: Object.entries(profitByBetType).map(([type, profit]) => ({ type, profit })),
    };
};

function analyticsToText(analytics: any): string {
    return `–í–æ—Ç —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞–≤–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${analytics.totalProfit.toFixed(2)}\n- ROI: ${analytics.roi.toFixed(2)}%\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫: ${analytics.betCount}\n- –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: ${analytics.winRate.toFixed(2)}%\n- –ü—Ä–∏–±—ã–ª—å –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞: ${JSON.stringify(analytics.profitBySport.map(p => `${p.sport}: ${p.profit.toFixed(2)}`))}\n- –ü—Ä–∏–±—ã–ª—å –ø–æ —Ç–∏–ø–∞–º —Å—Ç–∞–≤–æ–∫: ${JSON.stringify(analytics.profitByBetType.map(p => `${p.type}: ${p.profit.toFixed(2)}`))}`;
}


// --- MENUS & KEYBOARDS ---
const getMainMenu = (isLinked: boolean) => ({
    inline_keyboard: [
        [{ text: "üìù –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data: "add_bet" }, { text: "üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏", callback_data: "manage_bets" }],
        [{ text: "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data: "view_stats" }, { text: "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–º", callback_data: "bank_management" }],
        [{ text: "ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫", callback_data: "ai_chat" }],
        [{ text: "üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data: "competition_menu" }]
    ]
});

const getNewUserMenu = () => ({ inline_keyboard: [[{ text: "‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ", callback_data: "register" }], [{ text: "üîó –£ –º–µ–Ω—è –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data: "link_account" }]] });
const getBankMenu = (bankroll: number) => ({ inline_keyboard: [[{ text: `‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)`, callback_data: "deposit" }], [{ text: `‚ûñ –°–Ω—è—Ç—å (–≤—Ä—É—á–Ω—É—é)`, callback_data: "withdraw" }], [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }]] });
const getCompetitionsMenu = () => ({ inline_keyboard: [[{ text: "üèÖ –¢–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤", callback_data: "show_leaderboards" }], [{ text: "üéØ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data: "show_challenges" }], [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }]] });
const getLeaderboardTypeMenu = () => ({ inline_keyboard: [
    [{ text: "üëë –ö–æ—Ä–æ–ª–∏ ROI", callback_data: "leaderboard_select_period:roi" }, { text: "üí∞ –¢–æ–ø –≤—ã–∏–≥—Ä—ã—à–∏", callback_data: "leaderboard_select_period:top_winners" }],
    [{ text: "üí∏ –ö–ª—É–± '–ù–µ–ø–æ–≤–µ–∑–ª–æ'", callback_data: "leaderboard_select_period:unluckiest" }, { text: "üèÉ‚Äç‚ôÇÔ∏è –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data: "leaderboard_select_period:most_active" }],
    [{ text: "‚¨ÖÔ∏è –ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º", callback_data: "competition_menu" }]
] });
const getLeaderboardPeriodMenu = (type: string) => ({ inline_keyboard: [
    [{ text: "–ù–µ–¥–µ–ª—è", callback_data: `leaderboard_show:${type}:week` }, { text: "–ú–µ—Å—è—Ü", callback_data: `leaderboard_show:${type}:month` }],
    [{ text: "–ì–æ–¥", callback_data: `leaderboard_show:${type}:year` }, { text: "–í—Å–µ –≤—Ä–µ–º—è", callback_data: `leaderboard_show:${type}:all_time` }],
    [{ text: "‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É —Ç–∞–±–ª–∏—Ü—ã", callback_data: "show_leaderboards" }]
] });


async function sendNewUserWelcome(token: string, chatId: number, messageId?: number) {
    const welcomeText = "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–Ω–µ–≤–Ω–∏–∫ –°—Ç–∞–≤–æ–∫!*\n\n–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∞–π—Ç–∞.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'. –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–∏–≤—è–∂–∏—Ç–µ –µ–≥–æ.";
    const menu = getNewUserMenu();
    if (messageId) { await editMessageText(token, chatId, messageId, welcomeText, menu); } else { await sendMessage(token, chatId, welcomeText, menu); }
}

function createSportKeyboard() {
    const keyboard = [];
    for (let i = 0; i < SPORTS.length; i += 3) { keyboard.push(SPORTS.slice(i, i + 3).map(sport => ({ text: sport, callback_data: `add_bet_data:sport:${sport}` }))); }
    keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" }]);
    return { inline_keyboard: keyboard };
}

function createMarketKeyboard(sport: string, page = 0) {
    const markets = MARKETS_BY_SPORT[sport] || [];
    const itemsPerPage = 9;
    const start = page * itemsPerPage;
    const end = start + itemsPerPage;
    const paginatedMarkets = markets.slice(start, end);
    const keyboard = [];
    for (let i = 0; i < paginatedMarkets.length; i += 3) { keyboard.push(paginatedMarkets.slice(i, i + 3).map(market => ({ text: market, callback_data: `add_bet_data:market:${market}` }))); }
    const navigation = [];
    if (page > 0) navigation.push({ text: "‚¨ÖÔ∏è", callback_data: `add_bet_page:market:${page - 1}` });
    if (end < markets.length) navigation.push({ text: "‚û°Ô∏è", callback_data: `add_bet_page:market:${page + 1}` });
    if (navigation.length > 0) keyboard.push(navigation);
    keyboard.push([{ text: "‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data: "add_bet_step:2" }, { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "main_menu" }]);
    return { inline_keyboard: keyboard };
}

// --- MAIN HANDLER ---
export const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {
    if (!env.TELEGRAM_BOT_TOKEN || !env.BOT_STATE || !env.GEMINI_API_KEY) {
        console.error("FATAL: Environment variables (Telegram Token, KV, Gemini Key) are not configured.");
        return new Response('Server configuration error', { status: 500 });
    }
    
    const ai = new GoogleGenAI({ apiKey: env.GEMINI_API_KEY });
    const requestClone = request.clone();
    
    try {
        const update = await request.json() as TelegramUpdate;
        const message = update.message || update.callback_query?.message;
        const text = update.message?.text?.trim();
        const chatId = message?.chat.id;
        const userId = update.callback_query?.from.id || update.message?.from.id;
        const callbackQueryId = update.callback_query?.id;
        const callbackData = update.callback_query?.data;
        const messageId = message?.message_id;

        if (!chatId || !userId) return new Response('OK');
        
        const userLinkKey = `telegram:${userId}`;
        const userEmail = await env.BOT_STATE.get(userLinkKey);
        
        if (text && text.startsWith('/')) {
            await setDialogState(env.BOT_STATE, userId, null);
            switch (text.split(' ')[0]) {
                case '/start':
                case '/menu':
                    if (userEmail) {
                        const userData = await getUserData(env.BOT_STATE, userEmail);
                        await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${userData?.nickname || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`, getMainMenu(true));
                    } else {
                        await sendNewUserWelcome(env.TELEGRAM_BOT_TOKEN, chatId);
                    }
                    return new Response('OK');
                case '/aichat':
                     if (userEmail) {
                        await setDialogState(env.BOT_STATE, userId, { action: 'ai_chat_active', data: { history: [] } });
                        const aiWelcomeText = "ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º!*\n\n–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.";
                        await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, aiWelcomeText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data: "main_menu" }]] });
                     } else {
                        await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.");
                        await sendNewUserWelcome(env.TELEGRAM_BOT_TOKEN, chatId);
                     }
                     return new Response('OK');
            }
        }

        if (callbackQueryId) {
            await answerCallbackQuery(env.TELEGRAM_BOT_TOKEN, callbackQueryId);
            const [action, ...params] = callbackData.split(':');
            
            switch(action) {
                case 'start_new_user': if (messageId) await sendNewUserWelcome(env.TELEGRAM_BOT_TOKEN, chatId, messageId); return new Response('OK');
                case 'register':
                    await setDialogState(env.BOT_STATE, userId, { action: 'register_ask_email', data: {} });
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "‚úçÔ∏è *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email-–∞–¥—Ä–µ—Å.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "start_new_user" }]] });
                    return new Response('OK');
                case 'link_account':
                     await setDialogState(env.BOT_STATE, userId, { action: 'link_ask_code', data: {} });
                     const instructionText = "üîê *–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞*\n\n1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –î–Ω–µ–≤–Ω–∏–∫–∞ –°—Ç–∞–≤–æ–∫.\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* ‚ûù *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram*.\n3. –ù–∞–∂–º–∏—Ç–µ *'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥'*.\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤ —ç—Ç–æ—Ç —á–∞—Ç.";
                     const backButtonCallback = userEmail ? "main_menu" : "start_new_user";
                     if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, instructionText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: backButtonCallback }]] });
                     else await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, instructionText);
                     return new Response('OK');
            }

            if (!userEmail) {
                await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.");
                await sendNewUserWelcome(env.TELEGRAM_BOT_TOKEN, chatId);
                return new Response('OK');
            }

            const userData = await getUserData(env.BOT_STATE, userEmail);
            if (!userData) {
                 await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.");
                 await env.BOT_STATE.delete(userLinkKey);
                 return new Response('OK');
            }
            
            if (action.startsWith('add_bet')) {
                const dialogState = await getDialogState(env.BOT_STATE, userId) || { action: 'add_bet', data: { step: 1 } };
                if (dialogState.action !== 'add_bet') return new Response('OK');

                switch(action) {
                    case 'add_bet':
                        dialogState.data = { step: 1 };
                        await setDialogState(env.BOT_STATE, userId, dialogState);
                        if(messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–®–∞–≥ 1/5)*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:", createSportKeyboard());
                        return new Response('OK');
                    case 'add_bet_step':
                        dialogState.data.step = parseInt(params[0]);
                        dialogState.data.botMessageId = messageId;
                        await setDialogState(env.BOT_STATE, userId, dialogState);
                        break;
                    case 'add_bet_data':
                        const [dataType, ...valueParts] = params;
                        const value = valueParts.join(':');
                        dialogState.data[dataType] = dataType === 'stake' ? parseFloat(value) : value;
                        dialogState.data.step++;
                        dialogState.data.botMessageId = messageId;
                        await setDialogState(env.BOT_STATE, userId, dialogState);
                        break;
                    case 'add_bet_page':
                        if(messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:", createMarketKeyboard(dialogState.data.sport, parseInt(params[0])));
                        return new Response('OK');
                    case 'add_bet_save':
                        const betData = dialogState.data;
                        const newBet: Bet = {
                            sport: betData.sport, legs: [{ homeTeam: betData.homeTeam, awayTeam: betData.awayTeam, market: betData.market }],
                            bookmaker: 'Telegram', betType: BetType.Single, stake: betData.stake, odds: betData.odds,
                            status: BetStatus.Pending, id: new Date().toISOString() + Math.random(), createdAt: new Date().toISOString(),
                            event: generateEventString([{ homeTeam: betData.homeTeam, awayTeam: betData.awayTeam, market: betData.market }], BetType.Single, betData.sport),
                            tags: ['telegram'],
                        };
                        userData.bets.unshift(newBet);
                        await saveUserData(env.BOT_STATE, userEmail, userData);
                        await setDialogState(env.BOT_STATE, userId, null);
                        if(messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, `‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n*${newBet.event}*`, getMainMenu(true));
                        return new Response('OK');
                }

                const currentStep = dialogState.data.step;
                const botMessageId = dialogState.data.botMessageId;
                switch (currentStep) {
                    case 1: if(botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, "üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–®–∞–≥ 1/5)*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:", createSportKeyboard()); break;
                    case 2:
                        const isIndividual = ['–¢–µ–Ω–Ω–∏—Å', '–ë–æ–∫—Å', '–ú–ú–ê'].includes(dialogState.data.sport);
                        const teamExample = isIndividual ? "–î–∂–æ–∫–æ–≤–∏—á - –ê–ª—å–∫–∞—Ä–∞—Å" : "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ - –ë–∞—Ä—Å–µ–ª–æ–Ω–∞";
                        if(botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, `üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–®–∞–≥ 2/5)*\n\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\`–ö–æ–º–∞–Ω–¥–∞ 1 - –ö–æ–º–∞–Ω–¥–∞ 2\`\n\n*–ü—Ä–∏–º–µ—Ä:* \`${teamExample}\``, { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Ä—Ç", callback_data: "add_bet_step:1" }]] });
                        break;
                    case 3: if(botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, "üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–®–∞–≥ 3/5)*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:", createMarketKeyboard(dialogState.data.sport)); break;
                    case 4:
                        const recommendation = calculateRiskManagedStake(userData.bankroll, 2.0);
                        let stakeText = "üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–®–∞–≥ 4/5)*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (‚ÇΩ).";
                        const keyboardButtons = [];
                        if (recommendation) {
                            stakeText += `\n\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* ${recommendation.stake.toFixed(0)} ‚ÇΩ (${recommendation.percentage.toFixed(1)}% –æ—Ç –±–∞–Ω–∫–∞)`;
                            const recommendedStakeValue = recommendation.stake.toFixed(0);
                            keyboardButtons.push([{ text: `üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${recommendedStakeValue} ‚ÇΩ`, callback_data: `add_bet_data:stake:${recommendedStakeValue}` }]);
                        }
                        keyboardButtons.push([{ text: "‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ö–æ–¥", callback_data: "add_bet_step:3" }]);
                        if(botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, stakeText, { inline_keyboard: keyboardButtons });
                        break;
                    case 5: if(botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, "üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–®–∞–≥ 5/5)*\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.", { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data: "add_bet_step:4" }]] }); break;
                    case 6:
                        const confirmText = `üîç *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:*\n\n` + `*–°–ø–æ—Ä—Ç:* ${dialogState.data.sport}\n` + `*–°–æ–±—ã—Ç–∏–µ:* ${dialogState.data.homeTeam} - ${dialogState.data.awayTeam}\n` + `*–ò—Å—Ö–æ–¥:* ${dialogState.data.market}\n` + `*–°—É–º–º–∞:* ${dialogState.data.stake} ‚ÇΩ\n` + `*–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* ${dialogState.data.odds}\n\n` + `–í—Å–µ –≤–µ—Ä–Ω–æ?`;
                        if (botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, confirmText, { inline_keyboard: [[{ text: "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: "add_bet_save" }, { text: "‚úèÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data: "add_bet_step:1" }]] });
                        break;
                }
                return new Response('OK');
            }

            switch (action) {
                case 'main_menu':
                    await setDialogState(env.BOT_STATE, userId, null);
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${userData?.nickname || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`, getMainMenu(true));
                    return new Response('OK');
                
                case 'ai_chat':
                    await setDialogState(env.BOT_STATE, userId, { action: 'ai_chat_active', data: { history: [] } });
                    const aiWelcomeText = "ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å AI-–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º!*\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç—á –∏–ª–∏ –æ–±—Å—É–¥–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.\n\n*–ù–∞–ø—Ä–∏–º–µ—Ä:*\n- `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`\n- `–ö–∞–∫–∏–µ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –≤ –º–æ–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏?`\n- `–°–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ - –ë–∞–≤–∞—Ä–∏—è`";
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, aiWelcomeText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data: "main_menu" }]] });
                    return new Response('OK');

                case 'view_stats':
                    const analytics = calculateAnalytics(userData.bets, userData.bankroll, userData.bankHistory);
                    const statsText = `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n` + `üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫:* ${userData.bankroll.toFixed(2)} ‚ÇΩ\n` + `üìà *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${analytics.totalProfit >= 0 ? '+' : ''}${analytics.totalProfit.toFixed(2)} ‚ÇΩ\n` + `üéØ *ROI:* ${analytics.roi.toFixed(2)}%\n` + `‚úÖ *–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:* ${analytics.winRate.toFixed(2)}%\n` + `üìã *–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:* ${analytics.betCount}`;
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, statsText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }]] });
                    return new Response('OK');
                
                case 'manage_bets':
                    const pendingBets = userData.bets.filter(b => b.status === BetStatus.Pending).slice(0, 5);
                    let manageText = "üìà *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:";
                    const keyboard = [];
                    if (pendingBets.length > 0) {
                        for (const bet of pendingBets) { keyboard.push([{ text: `[${bet.sport}] ${bet.event}`, callback_data: `show_bet:${bet.id}` }]); }
                    } else {
                        manageText = "üìà *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏*\n\n–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.";
                    }
                    keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }]);
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, manageText, { inline_keyboard: keyboard });
                    return new Response('OK');
                
                case 'show_bet':
                    const betIdToShow = callbackData.substring('show_bet:'.length);
                    const betToShow = userData.bets.find(b => b.id === betIdToShow);
                    if (!betToShow) {
                        if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å—Ç–∞–≤–æ–∫", callback_data: "manage_bets" }]] });
                        return new Response('OK');
                    }
                    const betDetailsText = `*–î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–∫–∏:*\n` + `*–°–æ–±—ã—Ç–∏–µ:* ${betToShow.event}\n` + `*–°—É–º–º–∞:* ${betToShow.stake} ‚ÇΩ\n` + `*–ö–æ—ç—Ñ.:* ${betToShow.odds}\n\n` + `*–ö–∞–∫ –æ–Ω–∞ —Å—ã–≥—Ä–∞–ª–∞?*`;
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, betDetailsText, { inline_keyboard: [[{ text: "‚úÖ –í—ã–∏–≥—Ä—ã—à", callback_data: `set_status:${betToShow.id}:won` }], [{ text: "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à", callback_data: `set_status:${betToShow.id}:lost` }], [{ text: "üîÑ –í–æ–∑–≤—Ä–∞—Ç", callback_data: `set_status:${betToShow.id}:void` }], [{ text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å—Ç–∞–≤–æ–∫", callback_data: "manage_bets" }]] });
                    return new Response('OK');

                case 'set_status':
                    const setStatusParts = callbackData.split(':');
                    setStatusParts.shift();
                    const newStatus = setStatusParts.pop() as BetStatus;
                    const betIdToSet = setStatusParts.join(':');
                    const betIndex = userData.bets.findIndex(b => b.id === betIdToSet);
                    if (betIndex === -1) {
                         if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å—Ç–∞–≤–æ–∫", callback_data: "manage_bets" }]] });
                         return new Response('OK');
                    }
                    const betToUpdate = userData.bets[betIndex];
                    if (betToUpdate.status !== BetStatus.Pending) {
                        if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, `‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏ —É–∂–µ '${BET_STATUS_OPTIONS.find(o => o.value === betToUpdate.status)?.label}'.`, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å—Ç–∞–≤–æ–∫", callback_data: "manage_bets" }]] });
                        return new Response('OK');
                    }
                    betToUpdate.status = newStatus;
                    const profit = calculateProfit(betToUpdate);
                    betToUpdate.profit = profit;
                    userData.bets[betIndex] = betToUpdate;
                    let transactionType = BankTransactionType.Correction;
                    if (newStatus === BetStatus.Won) transactionType = BankTransactionType.BetWin;
                    if (newStatus === BetStatus.Lost) transactionType = BankTransactionType.BetLoss;
                    if (newStatus === BetStatus.Void) transactionType = BankTransactionType.BetVoid;
                    if (profit !== 0 || newStatus === BetStatus.Void) {
                        const transaction: BankTransaction = { id: new Date().toISOString() + Math.random(), timestamp: new Date().toISOString(), type: transactionType, amount: profit, previousBalance: userData.bankroll, newBalance: userData.bankroll + profit, description: `${BET_STATUS_OPTIONS.find(o=>o.value === newStatus)?.label}: ${betToUpdate.event}`, betId: betToUpdate.id };
                        userData.bankroll += profit;
                        userData.bankHistory.unshift(transaction);
                    }
                    await saveUserData(env.BOT_STATE, userEmail, userData);
                    const confirmationText = `‚úÖ –°—Ç–∞—Ç—É—Å –¥–ª—è *${betToUpdate.event}* –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ *${BET_STATUS_OPTIONS.find(o=>o.value === newStatus)?.label}*.\n–ü—Ä–∏–±—ã–ª—å: ${profit.toFixed(2)} ‚ÇΩ`;
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, confirmationText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Å—Ç–∞–≤–æ–∫", callback_data: "manage_bets" }]] });
                    return new Response('OK');

                case 'bank_management':
                    const bankText = `üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–º*\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${userData.bankroll.toFixed(2)} ‚ÇΩ*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –±–∞–Ω–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —É –±—É–∫–º–µ–∫–µ—Ä–∞ –∏–ª–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.`;
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, bankText, getBankMenu(userData.bankroll));
                    return new Response('OK');
                
                case 'deposit':
                    await setDialogState(env.BOT_STATE, userId, { action: 'ask_deposit_amount', data: {} });
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "‚ûï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "bank_management" }]] });
                    return new Response('OK');
                
                case 'withdraw':
                     await setDialogState(env.BOT_STATE, userId, { action: 'ask_withdraw_amount', data: {} });
                    if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "‚ûñ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è:", { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "bank_management" }]] });
                    return new Response('OK');
                
                // --- COMPETITION ACTIONS ---
                case 'competition_menu':
                     if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "üèÜ *–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", getCompetitionsMenu());
                     return new Response('OK');

                case 'show_leaderboards':
                     if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "üèÖ *–¢–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", getLeaderboardTypeMenu());
                     return new Response('OK');
                
                case 'leaderboard_select_period':
                     const type = params[0];
                     if (messageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, `*–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:`, getLeaderboardPeriodMenu(type));
                     return new Response('OK');
                
                case 'leaderboard_show':
                    if (messageId) {
                        await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å—á–∏—Ç–∞—é —Ä–µ–π—Ç–∏–Ω–≥...");
                        const [l_type, l_period] = params;
                        const allUsersData = await getAllUsersData(env.BOT_STATE);

                        if(allUsersData.length === 0) {
                            await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º", callback_data: "competition_menu" }]] });
                            return new Response('OK');
                        }

                        // --- Calculation Logic (adapted from useCompetitionData) ---
                        const periodStartDate = l_period === 'all_time' ? null : getPeriodStart(l_period as any);
                        const participantRawData = allUsersData.map(user => {
                            const periodBets = periodStartDate ? user.bets.filter(b => new Date(b.createdAt) >= periodStartDate) : user.bets;
                            const settledBets = periodBets.filter(b => b.status !== BetStatus.Pending && b.status !== BetStatus.Void);
                            const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
                            const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
                            const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
                            const wins = settledBets.filter(b => b.status === BetStatus.Won);
                            const losses = settledBets.filter(b => b.status === BetStatus.Lost);
                            return {
                                user: { nickname: user.nickname, email: user.email },
                                stats: {
                                    roi, totalBets: settledBets.length,
                                    biggestWin: wins.length > 0 ? Math.max(...wins.map(b => b.profit ?? 0)) : 0,
                                    biggestLoss: losses.length > 0 ? Math.min(...losses.map(b => b.profit ?? 0)) : 0,
                                }
                            };
                        }).filter(p => p.stats.totalBets > 0);

                        let sortedBoard;
                        let title, formatFn;

                        switch(l_type) {
                            case 'top_winners':
                                sortedBoard = participantRawData.sort((a,b) => b.stats.biggestWin - a.stats.biggestWin);
                                title = 'üí∞ –¢–æ–ø –≤—ã–∏–≥—Ä—ã—à–∏';
                                formatFn = (p: any) => `*${p.stats.biggestWin.toFixed(2)} ‚ÇΩ*`;
                                break;
                            case 'unluckiest':
                                sortedBoard = participantRawData.sort((a,b) => a.stats.biggestLoss - b.stats.biggestLoss);
                                title = 'üí∏ –ö–ª—É–± "–ù–µ–ø–æ–≤–µ–∑–ª–æ"';
                                formatFn = (p: any) => `*${p.stats.biggestLoss.toFixed(2)} ‚ÇΩ*`;
                                break;
                            case 'most_active':
                                sortedBoard = participantRawData.sort((a,b) => b.stats.totalBets - a.stats.totalBets);
                                title = 'üèÉ‚Äç‚ôÇÔ∏è –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ';
                                formatFn = (p: any) => `*${p.stats.totalBets}* —Å—Ç–∞–≤–æ–∫`;
                                break;
                            default: // ROI
                                sortedBoard = participantRawData.sort((a,b) => b.stats.roi - a.stats.roi);
                                title = 'üëë –ö–æ—Ä–æ–ª–∏ ROI';
                                formatFn = (p: any) => `*${p.stats.roi.toFixed(2)}%*`;
                        }

                        let leaderboardText = `${title} (${l_period})\n\n`;
                        const top10 = sortedBoard.slice(0, 10);
                        if(top10.length === 0) {
                            leaderboardText += "_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞._";
                        } else {
                            top10.forEach((p, index) => {
                                const icons = ['ü•á', 'ü•à', 'ü•â'];
                                const prefix = index < 3 ? icons[index] : `${index + 1}.`;
                                const isCurrentUser = p.user.email === userEmail ? " (–í—ã)" : "";
                                leaderboardText += `${prefix} ${p.user.nickname}${isCurrentUser} - ${formatFn(p)}\n`;
                            });
                        }

                        await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, leaderboardText, getLeaderboardPeriodMenu(l_type));
                    }
                    return new Response('OK');
                
                case 'show_challenges':
                     if (messageId) {
                        await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, "‚è≥ –°—á–∏—Ç–∞—é –ª–∏–¥–µ—Ä–æ–≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π...");
                        const allUsersData = await getAllUsersData(env.BOT_STATE);
                        const periodStartDate = getPeriodStart('week');
                        
                        const participants = allUsersData.map(user => {
                            const periodBets = user.bets.filter(b => new Date(b.createdAt) >= periodStartDate);
                            const settledBets = periodBets.filter(b => b.status !== BetStatus.Pending && b.status !== BetStatus.Void);
                            const totalStaked = settledBets.reduce((acc, bet) => acc + bet.stake, 0);
                            const totalProfit = settledBets.reduce((acc, bet) => acc + (bet.profit ?? 0), 0);
                            const roi = totalStaked > 0 ? (totalProfit / totalStaked) * 100 : 0;
                            const wins = settledBets.filter(b => b.status === BetStatus.Won);
                            return {
                                nickname: user.nickname,
                                totalBets: settledBets.length,
                                biggestWin: wins.length > 0 ? Math.max(...wins.map(b => b.profit ?? 0)) : 0,
                                roi,
                            };
                        });
                        
                        const biggestWinLeader = [...participants].sort((a,b) => b.biggestWin - a.biggestWin)[0];
                        const roiLeader = [...participants].filter(p => p.totalBets >= 10).sort((a,b) => b.roi - a.roi)[0];

                        let challengesText = `üéØ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏*\n\n`;
                        challengesText += `*${WEEKLY_CHALLENGES[0].title}*\n`;
                        if (biggestWinLeader && biggestWinLeader.biggestWin > 0) {
                            challengesText += `ü•á ${biggestWinLeader.nickname} - *${biggestWinLeader.biggestWin.toFixed(2)} ‚ÇΩ*\n\n`;
                        } else {
                             challengesText += `_–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–∞._\n\n`;
                        }

                        challengesText += `*${WEEKLY_CHALLENGES[1].title}*\n`;
                        if (roiLeader && roiLeader.roi > 0) {
                            challengesText += `ü•á ${roiLeader.nickname} - *${roiLeader.roi.toFixed(2)}%*\n\n`;
                        } else {
                             challengesText += `_–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω. 10 —Å—Ç–∞–≤–æ–∫)._\n\n`;
                        }
                        
                        await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, messageId, challengesText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º", callback_data: "competition_menu" }]] });
                     }
                     return new Response('OK');
            }
        }
        
        const dialogState = await getDialogState(env.BOT_STATE, userId);
        if (text && dialogState) {
            const userData = userEmail ? await getUserData(env.BOT_STATE, userEmail) : null;
            
            if (dialogState.action === 'add_bet') {
                 if (!userData || !userEmail) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start"); return new Response('OK'); }
                 if(messageId) await deleteMessage(env.TELEGRAM_BOT_TOKEN, chatId, messageId);

                 const step = dialogState.data.step;
                 const botMessageId = dialogState.data.botMessageId;

                 switch(step) {
                    case 2:
                        const teams = text.split('-').map(t => t.trim());
                        if (teams.length !== 2 || !teams[0] || !teams[1]) {
                             await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–ö–æ–º–∞–Ω–¥–∞ 1 - –ö–æ–º–∞–Ω–¥–∞ 2`.");
                             return new Response('OK');
                        }
                        dialogState.data.homeTeam = teams[0];
                        dialogState.data.awayTeam = teams[1];
                        dialogState.data.step = 3;
                        await setDialogState(env.BOT_STATE, userId, dialogState);
                        if(botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, "üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–®–∞–≥ 3/5)*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:", createMarketKeyboard(dialogState.data.sport));
                        break;
                    case 4:
                        const stake = parseFloat(text);
                        if (isNaN(stake) || stake <= 0) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."); return new Response('OK'); }
                        dialogState.data.stake = stake;
                        dialogState.data.step = 5;
                        await setDialogState(env.BOT_STATE, userId, dialogState);
                        if(botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, "üìù *–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–®–∞–≥ 5/5)*\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.", { inline_keyboard: [[{ text: "‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data: "add_bet_step:4" }]] });
                        break;
                    case 5:
                        const odds = parseFloat(text);
                        if (isNaN(odds) || odds <= 1) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1."); return new Response('OK'); }
                        dialogState.data.odds = odds;
                        dialogState.data.step = 6;
                        await setDialogState(env.BOT_STATE, userId, dialogState);
                        const confirmText = `üîç *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:*\n\n` + `*–°–ø–æ—Ä—Ç:* ${dialogState.data.sport}\n` + `*–°–æ–±—ã—Ç–∏–µ:* ${dialogState.data.homeTeam} - ${dialogState.data.awayTeam}\n` + `*–ò—Å—Ö–æ–¥:* ${dialogState.data.market}\n` + `*–°—É–º–º–∞:* ${dialogState.data.stake} ‚ÇΩ\n` + `*–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* ${dialogState.data.odds}\n\n` + `–í—Å–µ –≤–µ—Ä–Ω–æ?`;
                        if (botMessageId) await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, botMessageId, confirmText, { inline_keyboard: [[{ text: "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: "add_bet_save" }, { text: "‚úèÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data: "add_bet_step:1" }]] });
                        break;
                 }
                 return new Response('OK');
            }

            switch(dialogState.action) {
                case 'ai_chat_active':
                    if (!userEmail || !userData) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start"); return new Response('OK'); }
                    const thinkingMsgResponse = await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "ü§ñ –î—É–º–∞—é...");
                    const thinkingMsgId = thinkingMsgResponse?.result?.message_id;
                    const history = (dialogState.data.history || []) as Message[];
                    history.push({ role: 'user', text: text });
                    const analytics = calculateAnalytics(userData.bets, userData.bankroll, userData.bankHistory);
                    const currentDate = new Date().toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
                    const systemInstruction = generalSystemInstruction(currentDate);
                    const contents = history.map(msg => ({ role: msg.role, parts: [{ text: msg.text }] }));
                    if (history.length === 1 && (text.toLowerCase().includes('—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å') || text.toLowerCase().includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'))) {
                        contents[0].parts[0].text = `${analyticsToText(analytics)}\n\n${text}`;
                    }
                    try {
                        const result = await ai.models.generateContent({ model: "gemini-2.5-flash", contents: contents, config: { systemInstruction }, tools: [{googleSearch: {}}] });
                        const aiResponseText = result.text;
                        history.push({ role: 'model', text: aiResponseText });
                        await setDialogState(env.BOT_STATE, userId, { action: 'ai_chat_active', data: { history } });
                        if(thinkingMsgId) { await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, thinkingMsgId, aiResponseText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data: "main_menu" }]] }); }
                        else { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, aiResponseText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data: "main_menu" }]] }); }
                    } catch (e) {
                        console.error("Gemini call from bot failed:", e);
                        const errorText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
                        if (thinkingMsgId) { await editMessageText(env.TELEGRAM_BOT_TOKEN, chatId, thinkingMsgId, errorText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data: "main_menu" }]] }); }
                        else { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, errorText, { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data: "main_menu" }]] }); }
                    }
                    return new Response('OK');

                case 'link_ask_code':
                    const code = text.match(/\d{6}/)?.[0];
                    if (!code) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."); return new Response('OK'); }
                    const userDataString = await env.BOT_STATE.get(`tgauth:${code}`);
                    if (userDataString) {
                        const fullUserData = JSON.parse(userDataString) as UserData;
                        await env.BOT_STATE.put(`telegram:${userId}`, fullUserData.email);
                        await saveUserData(env.BOT_STATE, fullUserData.email, fullUserData);
                        await env.BOT_STATE.delete(`tgauth:${code}`);
                        await setDialogState(env.BOT_STATE, userId, null);
                        await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è ${fullUserData.email} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!`, getMainMenu(true));
                    } else {
                        await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞ —Å–∞–π—Ç–µ.");
                    }
                    return new Response('OK');
                
                case 'ask_deposit_amount':
                case 'ask_withdraw_amount':
                    if (!userData || !userEmail) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start"); return new Response('OK'); }
                    const amount = parseFloat(text);
                    const isDeposit = dialogState.action === 'ask_deposit_amount';
                    if (isNaN(amount) || amount <= 0) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "bank_management" }]] }); return new Response('OK'); }
                    if (!isDeposit && amount > userData.bankroll) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –°—É–º–º–∞ —Å–Ω—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–Ω–∫.", { inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "bank_management" }]] }); return new Response('OK'); }
                    const finalAmount = isDeposit ? amount : -amount;
                    const transaction: BankTransaction = { id: new Date().toISOString() + Math.random(), timestamp: new Date().toISOString(), type: isDeposit ? BankTransactionType.Deposit : BankTransactionType.Withdrawal, amount: finalAmount, previousBalance: userData.bankroll, newBalance: userData.bankroll + finalAmount, description: isDeposit ? '–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (Telegram)' : '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (Telegram)' };
                    userData.bankroll += finalAmount;
                    userData.bankHistory.unshift(transaction);
                    await saveUserData(env.BOT_STATE, userEmail, userData);
                    await setDialogState(env.BOT_STATE, userId, null);
                    await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, `‚úÖ –ë–∞–Ω–∫ –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *${userData.bankroll.toFixed(2)} ‚ÇΩ*`, getMainMenu(true));
                    return new Response('OK');
                
                case 'register_ask_email':
                    const email = text.toLowerCase();
                    if (!/^\S+@\S+\.\S+$/.test(email)) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "start_new_user" }]] }); return new Response('OK'); }
                    const existingUser = await getUserData(env.BOT_STATE, email);
                    if (existingUser) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "start_new_user" }]] }); return new Response('OK'); }
                    await setDialogState(env.BOT_STATE, userId, { action: 'register_ask_nickname', data: { email } });
                    await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∏–∫–Ω–µ–π–º (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞).");
                    return new Response('OK');

                case 'register_ask_nickname':
                    const nickname = text;
                    if (nickname.length < 3) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "start_new_user" }]] }); return new Response('OK'); }
                    const existingNickname = await getEmailByNickname(env.BOT_STATE, nickname);
                    if (existingNickname) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "start_new_user" }]] }); return new Response('OK'); }
                    await setDialogState(env.BOT_STATE, userId, { action: 'register_ask_password', data: { ...dialogState.data, nickname } });
                    await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤).\n\n‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏!* –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ —á–∞—Ç–∞.");
                    return new Response('OK');
                
                case 'register_ask_password':
                    const password = text;
                    if (password.length < 6) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", { inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "start_new_user" }]] }); return new Response('OK'); }
                    const { email: regEmail, nickname: regNickname } = dialogState.data;
                    const newUser: UserData = {
                        email: regEmail, nickname: regNickname, password_hash: mockHash(password), registeredAt: new Date().toISOString(),
                        referralCode: `${regNickname.toUpperCase().replace(/\s/g, '')}${Date.now().toString().slice(-4)}`,
                        buttercups: 0, status: 'active', bankroll: 10000, bets: [],
                        bankHistory: [{ id: new Date().toISOString() + Math.random(), timestamp: new Date().toISOString(), type: BankTransactionType.Deposit, amount: 10000, previousBalance: 0, newBalance: 10000, description: '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–Ω–∫' }],
                        goals: [],
                    };
                    await saveUserData(env.BOT_STATE, regEmail, newUser);
                    await saveNicknameMapping(env.BOT_STATE, regNickname, regEmail);
                    const userListJson = await env.BOT_STATE.get('user_list');
                    const userList = userListJson ? JSON.parse(userListJson) : [];
                    if (!userList.includes(regEmail)) {
                        userList.push(regEmail);
                        await env.BOT_STATE.put('user_list', JSON.stringify(userList));
                    }
                    await env.BOT_STATE.put(`telegram:${userId}`, regEmail);
                    await setDialogState(env.BOT_STATE, userId, null);
                    await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, `üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* \n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è *${regEmail}* —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.\n\n–ú–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`, getMainMenu(true));
                    return new Response('OK');
            }
        }

        if (text && !userEmail && !dialogState) {
            await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start.");
            await sendNewUserWelcome(env.TELEGRAM_BOT_TOKEN, chatId);
        }

    } catch (error) {
        console.error("Webhook Error:", error);
        const bodyText = await requestClone.text();
        console.error("Failed request body:", bodyText);
        try {
            const updateForError = JSON.parse(bodyText);
            const chatId = updateForError.message?.chat.id || updateForError.callback_query?.message?.chat.id;
             if (chatId) { await sendMessage(env.TELEGRAM_BOT_TOKEN, chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –Ø —É–∂–µ —Å–æ–æ–±—â–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.`); }
        } catch {}
    }
    
    return new Response('OK');
};