// functions/api/matches-with-predictions.ts
import { getTodaysGamesBySport } from '../services/sportApi';
import { translateTeamNames } from '../telegram/matches';
import { Env, SportGame, AIPrediction } from '../telegram/types';
import { GoogleGenAI, Type } from "@google/genai";

interface EventContext {
    request: Request;
    env: Env;
}

const getMatchStatusEmoji = (status: { short: string } | undefined): string => {
    if (!status) return '‚è≥';
    switch (status.short) {
        case '1H': case 'HT': case '2H': case 'ET': case 'BT': case 'P': case 'LIVE': case 'INTR': return 'üî¥';
        case 'FT': case 'AET': case 'PEN': case 'POST': case 'CANC': case 'ABD': case 'AWD': case 'WO': return 'üèÅ';
        default: return '‚è≥';
    }
};

const FINISHED_STATUSES = ['FT', 'AET', 'PEN', 'Finished'];

function getAiPayloadForSport(sport: string, matchName: string): { prompt: string; schema: any } {
    let outcomes: any;
    let recommendedEnum: string[];
    let promptOutcomes: string;

    switch (sport) {
        case 'basketball':
        case 'nba':
            promptOutcomes = '–ü1 (—Å –û–¢), –ü2 (—Å –û–¢), –¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 215.5, –¢–æ—Ç–∞–ª –ú–µ–Ω—å—à–µ 215.5, –¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 225.5, –¢–æ—Ç–∞–ª –ú–µ–Ω—å—à–µ 225.5';
            outcomes = { "–ü1 (—Å –û–¢)": { type: Type.NUMBER }, "–ü2 (—Å –û–¢)": { type: Type.NUMBER }, "–¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 215.5": { type: Type.NUMBER }, "–¢–æ—Ç–∞–ª –ú–µ–Ω—å—à–µ 215.5": { type: Type.NUMBER }, "–¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 225.5": { type: Type.NUMBER }, "–¢–æ—Ç–∞–ª –ú–µ–Ω—å—à–µ 225.5": { type: Type.NUMBER }};
            recommendedEnum = ["–ü1 (—Å –û–¢)", "–ü2 (—Å –û–¢)"];
            break;
        case 'hockey':
            promptOutcomes = '–ü1 (–æ—Å–Ω. –≤—Ä–µ–º—è), X (–æ—Å–Ω. –≤—Ä–µ–º—è), –ü2 (–æ—Å–Ω. –≤—Ä–µ–º—è), –ü1 (—Å –û–¢), –ü2 (—Å –û–¢), –¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 5.5, –¢–æ—Ç–∞–ª –ú–µ–Ω—å—à–µ 5.5';
            outcomes = { "–ü1 (–æ—Å–Ω. –≤—Ä–µ–º—è)": { type: Type.NUMBER }, "X (–æ—Å–Ω. –≤—Ä–µ–º—è)": { type: Type.NUMBER }, "–ü2 (–æ—Å–Ω. –≤—Ä–µ–º—è)": { type: Type.NUMBER }, "–ü1 (—Å –û–¢)": { type: Type.NUMBER }, "–ü2 (—Å –û–¢)": { type: Type.NUMBER }, "–¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 5.5": { type: Type.NUMBER }, "–¢–æ—Ç–∞–ª –ú–µ–Ω—å—à–µ 5.5": { type: Type.NUMBER } };
            recommendedEnum = ["–ü1 (–æ—Å–Ω. –≤—Ä–µ–º—è)", "X (–æ—Å–Ω. –≤—Ä–µ–º—è)", "–ü2 (–æ—Å–Ω. –≤—Ä–µ–º—è)"];
            break;
        case 'football':
        default:
            promptOutcomes = '–ü1, X, –ü2, 1X, X2, "–¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 2.5", "–¢–æ—Ç–∞–ª –ú–µ–Ω—å—à–µ 2.5", "–û–±–µ –∑–∞–±—å—é—Ç - –î–∞"';
            outcomes = { "–ü1": { type: Type.NUMBER }, "X": { type: Type.NUMBER }, "–ü2": { type: Type.NUMBER }, "1X": { type: Type.NUMBER }, "X2": { type: Type.NUMBER }, "–¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 2.5": { type: Type.NUMBER }, "–¢–æ—Ç–∞–ª –ú–µ–Ω—å—à–µ 2.5": { type: Type.NUMBER }, "–û–±–µ –∑–∞–±—å—é—Ç - –î–∞": { type: Type.NUMBER } };
            recommendedEnum = ["–ü1", "X", "–ü2"];
            break;
    }

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ "${sport}": ${matchName}. –î–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–¥–∞ –∏ –ü–†–ò–ú–ï–†–ù–´–ô –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å—Ö–æ–¥–æ–≤: ${promptOutcomes}. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–∏ –∫–ª—é—á–∞: "probabilities", "coefficients" –∏ "recommended_outcome".
- "probabilities" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–æ–≤, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100).
- "coefficients" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–æ–≤, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - –ü–†–ò–ú–ï–†–ù–´–ô –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ö–æ–¥–∞ (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1.85).
- "recommended_outcome" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –û–î–ò–ù –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∏—Å—Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ [${recommendedEnum.map(e => `"${e}"`).join(', ')}].`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            probabilities: { type: Type.OBJECT, properties: outcomes, description: "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö." },
            coefficients: { type: Type.OBJECT, properties: outcomes, description: "–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∏—Å—Ö–æ–¥–æ–≤." },
            recommended_outcome: { type: Type.STRING, enum: recommendedEnum, description: "–°–∞–º—ã–π –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∏—Å—Ö–æ–¥ –∏–∑ –ü1/X/–ü2." }
        },
        required: ["probabilities", "recommended_outcome", "coefficients"]
    };

    return { prompt, schema };
}

export const onRequestGet = async ({ request, env }: EventContext): Promise<Response> => {
    try {
        const url = new URL(request.url);
        const sport = url.searchParams.get('sport');

        if (!sport) {
            return new Response(JSON.stringify({ error: 'Sport parameter is required' }), { status: 400, headers: { 'Content-Type': 'application/json' } });
        }

        const games = await getTodaysGamesBySport(sport, env);
        if (games.length === 0) {
            return new Response(JSON.stringify({ matches: [], newPredictions: [] }), { status: 200, headers: { 'Content-Type': 'application/json' } });
        }

        const teamNames = games.flatMap(game => [game?.teams?.home?.name, game?.teams?.away?.name]).filter((name): name is string => !!name);
        const uniqueTeamNames = Array.from(new Set(teamNames));
        const translationMap = await translateTeamNames(uniqueTeamNames, env);
        
        const ai = new GoogleGenAI({ apiKey: env.GEMINI_API_KEY });
        const predictionPromises = games.map(async (game) => {
            try {
                if (game.status.short !== 'NS') return null;

                const homeTeam = translationMap[game.teams.home.name] || game.teams.home.name;
                const awayTeam = translationMap[game.teams.away.name] || game.teams.away.name;
                const matchName = `${homeTeam} vs ${awayTeam}`;
                
                const { prompt, schema } = getAiPayloadForSport(sport, matchName);

                const response = await ai.models.generateContent({
                    model: "gemini-2.5-flash",
                    contents: prompt,
                    config: { responseMimeType: "application/json", responseSchema: schema }
                });
                
                return {
                    sport: sport,
                    matchName: matchName,
                    prediction: response.text,
                };
            } catch (error) {
                console.error(`Failed to get AI prediction for match ID ${game.id}:`, error);
                return null;
            }
        });

        const newPredictions = (await Promise.all(predictionPromises)).filter((p): p is Omit<AIPrediction, 'id'|'createdAt'|'status'> => p !== null);

        const translatedGames = games.map(game => {
            const gameData: any = {
                sport: sport,
                eventName: game.league.name,
                teams: `${translationMap[game.teams.home.name] || game.teams.home.name} vs ${translationMap[game.teams.away.name] || game.teams.away.name}`,
                date: new Date(game.timestamp * 1000).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' }),
                time: new Date(game.timestamp * 1000).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', timeZone: 'Europe/Moscow' }),
                isHotMatch: false, 
                status: { ...game.status, emoji: getMatchStatusEmoji(game.status) },
            };
            
            if (FINISHED_STATUSES.includes(game.status.short) && game.scores && game.scores.home !== null && game.scores.away !== null) {
                gameData.score = `${game.scores.home} - ${game.scores.away}`;
                gameData.scores = { home: game.scores.home, away: game.scores.away };
                 if (sport === 'hockey' || sport === 'basketball' || sport === 'nba') {
                    gameData.winner = game.scores.home > game.scores.away ? 'home' : 'away';
                } else { // Football etc.
                    if (game.scores.home > game.scores.away) gameData.winner = 'home';
                    else if (game.scores.away > game.scores.home) gameData.winner = 'away';
                    else gameData.winner = 'draw';
                }
            }

            return gameData;
        });

        return new Response(JSON.stringify({ matches: translatedGames, newPredictions }), {
            status: 200,
            headers: { 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=300' },
        });

    } catch (error) {
        console.error('Error in /api/matches-with-predictions:', error);
        return new Response(JSON.stringify({ error: 'Failed to fetch matches with predictions.' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
    }
};